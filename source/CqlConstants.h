//
//  Copyright (C) 1994-2003  Seth Kurtzberg
//
// CQL++ This program is free software.  The copyright is reserved.
//
// The file COPYING included with the distribution specifies the license
// granted to users of CQL++.  You can also view the licensing terms
// at http://www.cql.com/copying.html
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See COPYING
// for more information
//
// If you did not receive the file COPYING which contains the terms of
// the license, and you do not have access to the world wide web, you
// can request a copy by the following email address:  support@cql.com.
// If you do not have access to email, you can obtain a copy by postal
// mail by writing to Machine Independent Software Corporation,
// 9663 East Voltaire Drive, Scottsdale, Arizona, 85260, USA
//


#ifndef __CqlConstants_h
#define __CqlConstants_h


class CqlConstants
{
public :

    enum AbstractValueType
	{
		ABSTRACT_VALUE_TYPE_NOT_SET,
		DYNAMIC_ELEMENT,
		NULL_ELEMENT,
		IDENTIFIER_ELEMENT,
		LITERAL_ELEMENT,
		SUBQUERY_ELEMENT
	};

	enum BookmarkUseOption
	{
		UB_OFF = 0,
		UB_ON = 1
	};

	enum CompareResult
	{
		THIS_EQUAL_TO_OTHER,
		THIS_LESS_THAN_OTHER,
		THIS_GREATER_THAN_OTHER,
		COMPARE_RESULT_UNSET
	};

	enum ConcurrencyOption
	{
		CQL_CCO_LOCK = 2,
		CQL_CCO_ROWVER = 4,
		CQL_CCO_VALUES = 8,
		CQL_CCO_READ_ONLY = 1
	};

	enum ConditionalOperators
	{
		CQL_COP_EQUAL,
		CQL_COP_GREATER,
		CQL_COP_GREATER_OR_EQUAL,
		CQL_COP_LESS,
		CQL_COP_LESS_OR_EQUAL,
		CQL_COP_NOT_EQUAL,
		CQL_COP_UNDEFINED
	};

	enum ConnectDefaults
	{
		CQL_CD_LOGIN_TIMEOUT = 120,
		CQL_CD_MAX_LENGTH = 4092,
		CQL_CD_MAX_ROWS = 1024,
		CQL_CD_QUERY_TIMEOUT = 600,
		CQL_CD_ROWSET_SIZE = 1024
	};

	enum CopyStates
	{
		NO_COPY,
		DO_COPY
	};

	enum CqlColumnType
	{
		CQL_BIGINT,
		CQL_BINARY,
		CQL_BIT,
		CQL_CHAR,
		CQL_CHARUC,
		CQL_COLUMN_UNDEFINED_TYPE,
		CQL_DATE,
		CQL_DECIMAL,
		CQL_FLOAT,
		CQL_INTEGER,
		CQL_LONGVARBINARY,
		CQL_LONGVARCHAR,
		CQL_SMALLINT,
		CQL_REAL,
		CQL_TIME,
		CQL_TIMESTAMP,
		CQL_TINYINT,
		CQL_VARBINARY,
		CQL_VARCHAR
	};

	const char * const columnTypeName( CqlColumnType t )
    {
		switch( t )
		{
		case CQL_BIGINT :
			return "BIGINT";

		case CQL_BINARY :
			return "BINARY";

		case CQL_BIT :
			return "BIT";

		case CQL_CHAR :
			return "CHAR";

		case CQL_CHARUC :
			return "CHARUC";

		case CQL_COLUMN_UNDEFINED_TYPE :
			return "UNDEFINED";

		case CQL_DATE :
			return "DATE";

		case CQL_DECIMAL :
			return "DECIMAL";

		case CQL_FLOAT :
			return "FLOAT";

		case CQL_INTEGER :
			return "INTEGER";

		case CQL_LONGVARBINARY :
			return "LONGVARBINARY";

		case CQL_LONGVARCHAR :
			return "LONGVARCHAR";

		case CQL_SMALLINT :
			return "SMALLINT";

		case CQL_REAL :
			return "REAL";

		case CQL_TIME :
			return "TIME";

		case CQL_TIMESTAMP :
			return "TIMESTAMP";

		case CQL_TINYINT :
			return "TINYINT";

		case CQL_VARBINARY :
			return "VARBINARY";

		case CQL_VARCHAR :
			return "VARCHAR";
		}

		// stupid compiler
		return "IMPOSSIBLE";
	}

	enum CursorTypeOption
	{
		CURSOR_FORWARD_ONLY = 0,
		CURSOR_KEYSET_DRIVEN = 1,
		CURSOR_DYNAMIC = 2,
		CURSOR_STATIC = 3
	};

	enum DateFormats
	{
		MMDDYY,
		MMDDYYYY,
		DDMMYY,
		DDMMYYYY,
		YYYYMMDD
	};

	enum HandleStatementType
	{
		ALTER_TABLE,
		CREATE_INDEX,
		CREATE_TABLE,
		CREATE_VIEW,
		DELETE_POSITIONED,
		DELETE_SEARCHED,
		DROP_INDEX,
		DROP_TABLE,
		DROP_VIEW,
		GRANT_STATEMENT,
		INSERT_VALUES,
		INSERT_SELECT,
		REVOKE_STATEMENT,
		CQL_HST_UNKNOWN,
		UPDATE_POSITIONED,
		UPDATE_SEARCHED
	};

	enum KeyType
	{
		CQL_UNIQUE,
		CQL_NONUNIQUE,
		CQL_HASH
	};

	enum LengthStates
	{
		NO_LENGTH,
		ONE_BYTE_LENGTH,
		FOUR_BYTE_LENGTH
	};

	enum NoscanOption
	{
		NOSCAN_OFF = 0,
		NOSCAN_ON = 1
	};

	enum RetrieveDataOption
	{
		RD_OFF = 0,
		RD_ON = 1
	};

	enum SignValues
	{
		SV_POSITIVE,
		SV_NEGATIVE
	};

	enum StatementStatus
	{
		VIRGIN,
		PREPARED,
		CLOSED
	};

	enum TableType
	{
		CQL_CQL,
		CQL_CQL_TEMPORARY,
		CQL_DATABLITZ,
		CQL_UNDEFINED
	};
};


class ErrorConstants
{
public :

	enum ErrorCodes
	{
		CQL_NO_ERROR = 0,

		CQL_NO_DATA_FOUND = 100,

		//
		//  last number 1071
		//
		ALTER_REQUESTED_FOR_VIEW = 1020,
		ASSIGNMENT_FROM_INVALID_TYPE = 1031,
		ASYNCHRONOUS_EXECUTION_NOT_SUPPORTED = 1058,
		BINARY_LENGTH_INCORRECT_FOR_SQL_TYPE = 1063,
		BINARY_TYPE_USED_IN_EXPRESSION = 1069,
		BOOKMARKS_NOT_SUPPORTED = 1061,
		BOOLEAN_TEST_OF_INVALID_TYPE = 1029,
		CHECK_EXPRESSION_COLUMN_NOT_RECOGNIZED = 1050,
		CLOSE_CALLED_WITH_PENDING_TRANSACTION = 1038,
		COLUMN_CHECK_EXPRESSION_NOT_SATISFIED = 1051,
		COLUMN_DOES_NOT_EXIST = 1002,
		COLUMN_NUMBER_OUT_OF_RANGE = 1044,
		CONCURRENCY = 1000,
		CONNECTION_NOT_OPEN = 1054,
		CONVERSION_DECODING_ERROR = 1028,
		CREATE_INDEX_REQUESTED_FOR_VIEW = 1021,
		CURSOR_ALREADY_HAS_A_NAME = 1047,
		CURSOR_OPERATION_REQUESTED_FOR_NON_SELECT = 1046,
		DATA_TRUNCATED = 1041,
		DELETE_NO_CURRENT_POSITION = 1042,
		DIVISION_BY_ZERO = 1030,
		DUPLICATE_CURSOR_NAME = 1048,
		DUPLICATE_INSERT_REJECTED = 1040,
		EXTENDED_FETCH_NOT_SUPPORTED = 1062,
		FOREIGN_KEY_DOES_NOT_EXIST = 1053,
		FUNCTION_SEQUENCE_ERROR = 1064,
		HOST_SERVICE_NAME_RETRIEVAL_ERROR = 1043,
		INCOMPATIBLE_TYPES_IN_EXPRESSION = 1025,
		INCOMPATIBLE_TYPES_FOR_ASSIGNMENT = 1024,
		INDEX_NAME_NOT_FOUND = 1010,
		INTERACTIVE_SELECT_ON_BINARY_TYPE = 1068,
		INVALID_CONVERSION_REQUESTED = 1027,
		INVALID_CURSOR_HANDLE = 1037,
		INVALID_CURSOR_STATE = 1006,
		INVALID_JOIN_RELATIONSHIPS = 1036,
		INVALID_LENGTH_IN_STRING_FUNCTION = 1026,
		INVALID_TYPE_COMBINATION = 1023,
		INVALID_VARIABLE_SPECIFICATION_VALUE = 1035,
		INSERT_SELECT_MISMATCH = 1015,
		INSERT_VALUES_MISMATCH = 1017,
		KEYSETS_NOT_SUPPORTED = 1059,
		NETWORK_PACKET_NOT_CHANGEABLE = 1056,
		NO_DELETE_PRIVILEGE = 1008,
		NO_INSERT_PRIVILEGE = 1014,
		NO_SELECT_PRIVILEGE = 1013,
		NO_UPDATE_PRIVILEGE = 1009,
		NULL_IFILE_HANDLE = 1067,
		PARAMETER_NOT_SET = 1071,
		PARAMETER_POSITION_NOT_FOUND = 1070,
		POSITIONED_DELETE_MULTIPLE_TABLES = 1005,
		POSITIONED_OPERATION_NAME_MISMATCH = 1007,
		POSITIONED_UPDATE_WITH_MULTIPLE_TABLES = 1019,
		QUALIFIERS_NOT_SUPPORTED = 1055,
		REFERENTIAL_INTEGRITY_VIOLATION = 1052,
		SCRIPT_NOT_FOUND = 1066,
		SEGMENT_DOES_NOT_EXIST = 1001,
		SIGNIFICANT_DIGITS_LOST_IN_CONVERSION = 1045,
		SIMULATED_CURSORS_NOT_USED = 1060,
		SQL_DROP_CASCADE_ERROR = 1012,
		SQL_DROP_RESTRICT_ERROR = 1011,
		SQL_FILE_OPEN_ERROR = 1004,
		SQL_TABLE_NOT_FOUND = 1003,
		SUBQUERY_MUST_RETURN_EXACTLY_ONE_ROW = 1039,
		SYNTAX = 1034,
		TABLE_NOT_PART_OF_SELECT = 1032,
		TOO_MANY_ROWS = 1018,
		TOO_MUCH_DATA_IN_PUT = 1065,
		TRANSLATION_DLL_NOT_SUPPORTED = 1057,
		TYPES_NOT_ASSIGNMENT_COMPATIBLE = 1016,
		UPDATE_COUNT_REQUESTED_FOR_NON_UPDATE = 1049,
		USER_FILE_CREATE_ERROR = 1022,
		ZERO_ROWS_IN_SUBQUERY = 1033,

		ABNORMAL_CONCURRENCY = 3006,
		ALLOCATION = 3008,
		ATTACHED_TO_OPEN_FILE = 3001,
		BAD_CAST = 3050,
		BTREE_INCONSISTENT = 3017,
		CACHE_INDEX_FAILURE = 3021,
		COMMUNICATIONS_ERROR = 3047,
		CQL_CLOSE = 3010,
		CQL_CREATE = 3002,
		CQL_OPEN = 3000,
		CQL_SOCKET_ERROR = 3013,
		CREATE_SEQUENCE = 3014,
		DICTIONARY_CREATE_ERROR = 3031,
		DICTIONARY_INCONSISTENCY = 3023,
		DICTIONARY_READ_ERROR = 3037,
		DICTIONARY_UPDATE_ERROR = 3032,
		EXPRESSION_INCONSISTENCY = 3038,
		FLUSH = 3011,
		INITIALIZATION = 3049,
		INTERNAL_ERROR = 3028,
		INVALID_OPEN_FILE_INDEX = 3019,
		INVALID_NODE_INDEX = 3020,
		INVALID_TIME_FROM_OS = 3040,
		ISAM_ACCESS_ERROR = 3039,
		ISAM_DATA_INDEX_INCONSISTENCY = 3036,
		ISAM_HEADER_INCONSISTENCY = 3033,
		LIST_INCONSISTENCY = 3015,
		LOG_READ = 3007,
		NO_SEGMENTS_FOR_KEY = 3016,
		OPEN_FILE_NOT_FOUND = 3018,
		PREDICATE_TREE_INCONSISTENCY = 3030,
		PRIVILEGE_DICTIONARY_UPDATE_ERROR = 3027,
		READ_ERROR = 3005,
		SEEK = 3009,
		SQL_BEGIN_TRANSACTION_ERROR = 3025,
		SQL_DELETE_ROW_FAILURE = 3022,
		SQL_END_TRANSACTION_ERROR = 3026,
		SQL_INDEX_DELETION_ERROR = 3024,
		SQL_ROLLBACK_TRANSACTION_ERROR = 3035,
		STACK_UNDERFLOW = 3029,
		TEMPNAME = 3012,
		TEMPORARY_FILE_ACCESS_ERROR = 3044,
		TEMPORARY_FILE_ADD_ERROR = 3042,
		TEMPORARY_FILE_CREATE_ERROR = 3041,
		TRANSACTION_STATE_ERROR = 3046,
		TYPE_NOT_SET_FOR_EXPRESSION = 3048,
		USER_FILE_ABNORMAL_CREATE_ERROR = 3034,
		USER_FILE_ACCESS_ERROR = 3043,
		VIEW_INCONSISTENT = 3045,
		VIRTUAL = 3003,
		WRITE_ERROR = 3004
		//  last number 3050
	};

};

typedef ErrorConstants::ErrorCodes *pErrorCodes;


class ExceptionCodes
{
public :

	enum ExceptionCode
	{
		EC_UNDEFINED,
		EC_ABSTRACT_TABLE,
		EC_ATTACHED_TO_OPEN_FILE,
		EC_BINARY_USED_IN_EXPRESSION,
		EC_BTREE_INCONSISTENT,
		EC_BUFFER_MANAGEMENT_FAILURE,
		EC_CHECK_VIOLATION,
		EC_C_LIBRARY_CALL_FAILED,
		EC_CLIB_FILE_SYSTEM,
		EC_CLOSE_CALLED_WITH_PENDING_TRANSACTION,
		EC_COLUMN_NOT_FOUND,
		EC_COMMUNICATION_FAILURE,
		EC_CONCURRENCY,
		EC_CONVERSION_FAILURE,
		EC_CONVERSION_SIZE_ERROR,
		EC_CORRUPTED_DICTIONARY,
		EC_CREATE_SEQUENCE,
		EC_CURSOR_NAME_NOT_FOUND,
		EC_CURSOR_OPERATION_FAILURE,
		EC_CURSOR_STATE,
		EC_DICTIONARY_ERROR,
		EC_DICTIONARY_UPDATE_FAILURE,
		EC_DOWNCAST,
		EC_DROP_RESTRICT_VIOLATION,
		EC_DUPLICATE_ROW,
		EC_EOF,
		EC_EXPRESSION_INCONSISTENCY,
		EC_FILE_NOT_FOUND,
		EC_FILE_SYSTEM,
		EC_FILENAME_CREATION_FAILURE,
		EC_FOREIGN_KEY_CREATE_FAILURE,
		EC_GROUP_BY_SELECT_VIOLATION,
		EC_ILLEGAL_OPERATION,
		EC_ILLEGAL_OPERATION_FOR_VIEW,
		EC_ILLEGAL_TYPE_CONVERSION,
		EC_INCOMPATIBLE_TYPES,
		EC_INDEX_ACCESS,
		EC_INDEX_NOT_FOUND,
		EC_INSERT_VALUES_MISMATCH,
		EC_INTEGRITY_VIOLATION,
		EC_INTERNAL_ERROR,
		EC_INVALID_CONSTRUCTOR,
		EC_INVALID_JOINT_RELATIONSHIP,
		EC_INVALID_LENGTH_IN_STRING_FUNCTION,
		EC_INVALID_PARAMETER_VALUE,
		EC_INVALID_TYPE_COMBINATION,
		EC_ISAM_ACCESS_FAILURE,
		EC_ISAM_OPTIMIZATION_ERROR,
		EC_KEY_NOT_FOUND,
		EC_LENGTH_EXCEEDED,
		EC_LENGTH_MISMATCH,
		EC_LENGTH_NOT_SET,
		EC_MEMORY_ALLOCATION_FAILURE,
		EC_MEMORY_INDEX_FAILURE,
		EC_NO_CURRENT_KEY,
		EC_NO_CURRENT_POSITION,
		EC_NO_DATA,
		EC_NO_MORE_ROWS,
		EC_NOT_IMPLEMENTED,
		EC_NO_TRANSACTION,
		EC_NUMERIC_OPERATION_ON_BINARY_DATA,
		EC_NUMERIC_OPERATION_ON_CHARACTER_DATA,
		EC_NUMERIC_OPERATION_ON_LOGICAL_DATA,
		EC_NUMERIC_OPERATION_ON_TIMESTAMP_DATA,
		EC_OBJECT_CREATION_FAILURE,
		EC_OPEN_FAILURE,
		EC_POSITIONED_OPERATION_WITH_MULTIPLE_TABLES,
		EC_PREDICATE_TREE_INCONSISTENT,
		EC_PRIVILEGE_VIOLATION,
		EC_REPORT_GENERATION,
		EC_SELECT_EVALUATION,
		EC_STACK_OVERFLOW,
		EC_STACK_UNDERFLOW,
		EC_STRING_REPRESENTATION_REQUESTED_FOR_BINARY_DATA,
		EC_SUBQUERY_MUST_RETURN_EXACTLY_ONE_ROW,
		EC_SYNTAX_ERROR,
		EC_SYSTEM_CONFIGURATION_ERROR,
		EC_TABLE_ACCESS_FAILURE,
		EC_TABLE_NOT_FOUND,
		EC_TEMPORARY_FILE_ERROR,
		EC_TRANSACTION_ERROR,
		EC_TRANSACTION_FILE_ERROR,
		EC_TRANSACTION_EXCEEDS_LOG_SPACE,
		EC_TYPE_CONVERSION,
		EC_TYPES_NOT_ASSIGNMENT_COMPATIBLE,
		EC_UNSUPPORTED_FEATURE,
		EC_USER_LIMIT_EXCEEDED,
		EC_USER_TABLE_CREATE_FAILURE,
		EC_USER_TABLE_UPDATE_FAILURE
	};

private :

	ExceptionCode ecode_;

public :

	ExceptionCodes( void ) : ecode_( EC_UNDEFINED ) { }
	ExceptionCodes( ExceptionCode _ecode ) : ecode_( _ecode ) { }
	//  Default destructor

	ExceptionCode ecode( void ) { return ecode_; }
	CqlString ecAsString( void ) const;
};


#define CQL_DICTIONARY_TABLE_TYPE CqlConstants::CQL_CQL
#define CQL_USER_TABLE_TYPE CqlConstants::CQL_CQL
#define CQL_TEMPORARY_TABLE_TYPE CqlConstants::CQL_CQL_TEMPORARY


#endif  //  __CqlConstants_h
