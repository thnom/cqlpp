/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /usr/mis/cvsroot/MISOpenSource/cql/source/CqlFlexScanner.cpp,v 1.3 2003/12/10 11:10:15 seth Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#ifndef _MSC_VER
#include <unistd.h>
#endif


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
;
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 371
#define YY_END_OF_BUFFER 372
static yyconst short int yy_accept[1779] =
    {   0,
      349,  349,    0,    0,    0,    0,  372,  371,  349,  371,
       10,   17,    7,    8,    3,    4,   20,    5,    9,    6,
       25,   19,    2,   16,   11,   13,   18,    1,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  369,  365,  356,  357,  352,  353,  368,
      354,  358,  355,  367,  351,  364,  359,  361,  366,  350,
      370,  349,    0,    0,  346,    0,   21,   24,   15,   12,
       14,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  344,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  369,  363,  360,  362,  370,    0,    0,    0,
      345,   21,   23,  348,  348,  348,  348,  348,  348,  348,
      348,  348,   47,  348,  348,  348,   51,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,   62,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  150,  348,  348,  348,  348,  348,  348,  348,
      159,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      170,  348,  348,  348,  348,  348,  348,  348,  185,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  230,  348,  232,  348,  348,
      348,  236,  348,  348,  348,  348,  348,  348,  348,  245,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  309,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  347,   22,   27,  348,  348,
       30,   31,  348,   38,  348,  348,   41,   42,   43,   45,
      348,  348,  348,  348,  348,   53,  348,  348,  348,  348,
      348,   59,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,   92,   93,  348,  348,  348,
      348,  348,  348,  348,  348,  112,  348,  348,  348,  114,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  134,  348,  348,  348,
      348,  348,  142,  348,  348,  348,  348,  348,  348,  348,
      151,  348,  348,  348,  348,  348,  348,  157,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  180,  348,  348,  348,  348,
      348,  189,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  200,  348,  348,  348,  348,  205,  348,  207,  348,
      212,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  223,  224,  348,  348,  348,  348,  231,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  246,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  280,  348,  348,  348,  283,  348,  348,  348,  287,
      348,  348,  348,  348,  348,  348,  348,  296,  348,  348,
      348,  301,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,    0,   25,  348,   29,  348,  348,
      348,  348,  348,  348,  348,  348,   46,  348,   50,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,   65,
       66,  348,  348,  348,   70,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  105,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  121,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  132,
      133,  348,  348,  348,  139,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  155,  156,  348,
      348,  160,  348,  348,  348,  164,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  184,  348,  187,  348,  348,  191,  348,  193,  348,
      348,  196,  348,  348,  348,  201,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  220,
      348,  222,  225,  348,  348,  348,  229,  233,  234,  348,
      348,  348,  348,  348,  241,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  258,
      259,  348,  261,  348,  348,  348,  348,  348,  348,  348,
      269,  270,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  282,  284,  348,  286,  348,  348,  348,  348,  348,
      293,  348,  348,  348,  348,  348,  348,  303,  304,  348,

      348,  348,  348,  348,  348,  315,  348,  348,  348,  348,
      348,  348,  348,  348,  325,  348,  348,  348,  348,  348,
      348,  333,  334,  335,  348,  348,  338,  348,  340,  348,
      342,  348,    0,  348,  348,  348,  348,  348,  348,  348,
      348,   40,   44,  348,   49,  348,  348,   55,  348,  348,
      348,  348,   61,  348,  348,  348,  348,  348,  348,  348,
       75,   76,  348,   78,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,   94,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  145,
      146,  147,  148,  149,  348,  348,  154,  348,  348,  161,
      162,  348,  348,  348,  348,  348,  348,  348,  172,  348,
      348,  175,  176,  348,  348,  348,  348,  348,  348,  348,
      348,  192,  348,  195,  348,  198,  348,  202,  203,  204,
      348,  208,  348,  348,  348,  214,  348,  216,  217,  348,
      219,  221,  348,  348,  348,  348,  237,  238,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  252,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      267,  348,  271,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  288,  348,  348,  348,  348,  294,  348,  348,
      348,  300,  348,  348,  348,  308,  348,  348,  348,  348,
      348,  318,  319,  348,  348,  348,  323,  324,  326,  328,
      348,  348,  348,  348,  348,  348,  337,    0,  348,  348,
      348,    0,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,   54,  348,   57,   58,  348,  348,  348,  348,
       69,  348,  348,   71,  348,  348,  348,   81,   82,  348,
       84,  348,  348,  348,  348,  348,   95,  348,  348,  102,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  120,  348,  348,  348,  348,  348,

      348,  348,  348,  130,  131,  348,  136,  137,  348,  348,
      141,  348,  348,  348,  348,  348,  158,  163,  348,  348,
      167,  168,  348,  348,  348,  348,  348,  178,  348,  348,
      348,  348,  348,  348,  194,  348,  199,  348,  209,  348,
      211,  213,  348,  348,  226,  348,  348,  235,  239,  348,
      348,  243,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  256,  348,  348,  348,  263,  348,  348,  266,  348,
      272,  348,  274,  275,  348,  277,  348,  279,  348,  348,
      348,  348,  348,  348,  348,  348,  299,  348,  348,  348,
      348,  348,  348,  348,  348,  320,  348,  322,  327,  348,

      348,  348,  332,  348,    0,  348,  348,  348,    0,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,   56,
      348,   63,  348,   67,   68,  348,  348,  348,   79,  348,
       83,   85,  348,  348,  348,   90,  348,   96,  101,  348,
      103,  348,  348,  348,  348,  348,  348,  348,  348,  115,
      116,  117,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  140,  348,  144,  152,  153,  348,
      348,  348,  348,  171,  348,  348,  348,  179,  348,  348,
      348,  188,  348,  348,  348,  348,  348,  348,  227,  348,
      348,  242,  348,  348,  348,  249,  348,  251,  348,  348,

      255,  257,  348,  348,  264,  348,  348,  348,  348,  348,
      281,  348,  289,  348,  348,  348,  348,  297,  348,  348,
      348,  348,  310,  311,  348,  348,  348,  321,  348,  330,
      331,  348,    0,  348,  341,  348,    0,   28,   32,  348,
      348,  348,  348,  348,   39,  348,  348,  348,   64,  348,
      348,   77,  348,  348,  348,   89,  348,  348,  348,  104,
      348,  348,  348,  348,  348,  348,  348,  348,  119,  122,
      348,  348,  348,  348,  348,  348,  129,  135,  348,  143,
      348,  348,  166,  348,  348,  348,  348,  348,  183,  348,
      190,  348,  348,  348,  348,  218,  348,  240,  348,  247,

      348,  250,  348,  348,  348,  348,  265,  268,  348,  348,
      278,  285,  290,  291,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  316,  348,  336,    0,  348,  348,   26,
       33,  348,  348,  348,   37,   48,  348,  348,  348,   73,
      348,   80,  348,  348,  348,  348,  348,  348,  348,  348,
      109,  110,  348,  348,  348,  348,  348,  348,  126,  348,
      348,  138,  348,  348,  169,  173,  174,  348,  181,  348,
      186,  348,  206,  348,  348,  348,  348,  248,  348,  254,
      260,  348,  348,  348,  348,  295,  348,  302,  305,  348,
      348,  348,  313,  348,  329,    0,  348,  348,  348,   35,

      348,  348,   60,  348,  348,   86,   87,  348,  348,  348,
      348,  348,  348,  108,  348,  113,  118,  123,  348,  125,
      127,  348,  348,  348,  348,  348,  197,  348,  348,  348,
      244,  253,  262,  348,  348,  292,  348,  348,  348,  348,
      348,    0,  348,  348,   34,   36,  348,   72,  348,   88,
      348,  348,  348,  106,  348,  348,  124,  348,  348,  348,
      177,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      312,  314,    0,  348,  348,  348,  348,  348,   97,   98,
      348,  348,  111,  128,  348,  348,  182,  348,  348,  228,
      273,  348,  348,  348,  348,    0,  339,  348,   52,  348,

       91,  348,  348,  317,  165,  348,  348,  348,  348,  306,
      348,    0,  343,  348,  348,  107,  348,  215,  348,  298,
      348,    0,  348,  348,  210,  276,  307,    0,   74,  348,
        0,   99,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  100,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   16,
       15,   15,   15,   15,   15,   15,   15,   17,   18,   19,
       20,   21,   22,   23,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
        1,    1,    1,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    4,    1,    1,    1,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1
    } ;

static yyconst short int yy_base[1786] =
    {   0,
        0,    0,   51,   73,   72,    0, 4476, 7934,   53,    0,
     7934, 4469, 7934, 7934, 7934, 7934, 7934,  111, 7934, 7934,
       51, 7934, 7934,   57, 7934, 4454, 7934, 7934,  102,  108,
      124,  126,  168,  192,  125,  100,  164,   97, 4444,  185,
      194,  211,  230,  238, 4427,  222,  257,  275,  205,  180,
      249,    0, 4442,   86, 7934, 7934, 7934, 7934, 7934, 7934,
     7934, 7934, 7934, 7934, 7934,  111, 7934, 4450, 7934, 7934,
        0,  131, 4465, 4462, 7934, 4464,  157,  168, 7934, 7934,
     7934,    0, 4423, 4426,  168,   99,  171, 4435,  316,  358,
     4419, 4431,  301,  215, 4425,  382,  154,  170,  133, 4414,

      381, 4414, 4400,  200,  384,  268,  178, 4393, 7934, 4388,
     4393, 4393,  276, 4374, 4365, 4357, 4359,  426,  270, 4349,
     4351,  197, 4338,  448,  240, 4330, 4321, 4336, 4317, 4316,
     4307,  491,  540, 4310, 4290, 4283,  226, 4297,  310,  306,
      315, 4279,  178,  320,  214, 4274,  248, 4278, 4252,  435,
      314, 4255, 4263,  578,  607,  353,  642, 4244, 4249,  379,
     4235,  669, 4234, 4223,  445, 4236,  288, 4223,  668, 4229,
      316, 4234, 4216,  255,  445, 4218,  445, 4231, 4218,  449,
     4226,  361, 4203,  348, 4208, 4206,  371,  713,  519, 4209,
      322,  402,  540,  454, 4186, 4194, 4184, 4183, 4158, 4159,

     4166, 4165,  410, 7934, 7934, 7934,    0, 4176,  449, 4176,
     7934,  472,  540,  736, 4126,  774,  796,  819, 4139,  857,
      879,  901, 7934,  923, 4120, 4128, 7934, 4109, 4114,  955,
     4097, 4102, 4078, 4091, 4089,  977, 4088, 7934,  539, 4078,
     4066, 4048, 4049, 4054, 4037, 4034, 4030,  531,  440,  595,
     4017, 1000, 1022, 4020, 4023,  657,  545, 1044, 4011, 1086,
      546, 4008, 4009, 3995, 3981, 3986,  567, 3989, 3978, 3963,
     3964, 1121, 3967, 3953, 3954, 3928, 1144,  564, 3927, 3933,
     3916,  598, 7934, 1166, 3911, 3911, 3902, 3908, 1209, 3901,
     7934, 3887, 3884, 3876, 3887, 3877, 3880, 3872, 3877, 3886,

     7934, 3878,  549, 3869, 3883, 3866, 3881, 1231, 7934, 3873,
     3870, 3863, 1269, 3875, 3861, 3861, 3859, 3871, 3872, 3871,
     3870, 3873, 1291, 3866, 3867, 3855, 3860, 1313, 3835, 1335,
     1379, 3832, 3832, 3842, 3837, 3844, 3824, 3822, 3837, 1423,
     1445, 3829, 3835, 3834, 3835, 7934, 1467, 7934, 3812, 3822,
     3826, 7934, 3829,  435, 3815, 3827, 3811, 3827, 3803, 7934,
     1489, 3812,  667,  566,  604, 3799, 3792, 3780, 3795,  606,
     3784,  611, 3768, 3763, 3769, 3755, 3747, 3752, 3746, 3740,
      402, 3729, 3729, 3712, 1511, 3700, 3708, 1549, 3707, 3699,
     3696, 1571, 3680, 3685, 3670, 1617,  629, 3667, 1639, 3662,

     3654, 3662, 3645, 7934,  608, 3642,  629, 3627,  563, 3631,
     3634, 3629, 3617, 3605, 3599, 3591,  669, 3598, 3578, 3580,
      664, 3582,  669, 3564, 3561, 7934,  748, 7934, 3557, 1661,
     7934, 7934, 1041, 7934, 3565, 3540, 7934, 7934, 7934, 7934,
     3548, 1683, 3529, 1705, 3531, 7934, 3518, 3521, 3520, 3510,
     3496, 7934, 3501, 3492, 3501, 1727, 1749, 3480, 3482, 3476,
     1771, 3469, 3465, 3464, 3447, 3457, 3435, 3438, 3416, 3435,
     3427, 3411, 3421, 3424, 3423, 7934, 7934, 3407, 3406, 3424,
     3419, 3408, 3413, 3419, 1815, 7934, 3414, 3419, 3406, 7934,
     3404, 3415, 3394, 3396, 3386, 1838, 3391, 3386, 3391, 3369,

     3371, 3364, 3363, 3350, 1879, 1901, 7934, 3356, 3335, 3334,
     1923, 3320, 7934, 3321, 3328, 3323, 3310, 3297, 3287, 3288,
     7934, 3287, 3277, 3281, 1967, 1989, 3266, 7934, 3273, 2011,
     3253, 3247, 3248, 2033, 3232, 3239, 3223, 3236, 3209, 3205,
     3216, 3209, 3190, 3187,  667, 7934,  686,  666, 3196, 2075,
     3187, 7934, 3165, 2097, 3180, 2119, 3155, 3162, 2141, 3164,
      630, 7934, 2163, 3145, 3140, 3144, 7934, 3127, 7934,  669,
     7934, 3135, 3119, 3122, 3101, 3100, 3094, 3090, 2185, 3082,
     2207, 7934, 7934, 2229, 3079, 3067, 2261, 7934, 2283, 2305,
     3071, 3058, 3057, 3044, 3052, 2327, 3045, 3052, 3034, 7934,

     3022, 3023, 3030, 3016, 3019, 2992, 3000, 2994, 2977, 2979,
     2967, 2349, 2371, 2977, 2393, 2958, 2965, 2964, 2937, 2943,
     2924, 2941, 2415, 2437, 2920, 2919, 2917, 2909, 2897, 2907,
     2895, 7934, 2883, 2874, 2459, 7934, 2481, 2876, 2503, 7934,
      726, 2860, 2857, 2866, 2525, 2844, 2836, 7934, 2854, 2840,
     2839, 7934, 2819, 2547, 2569, 2828, 2815, 2821, 2793, 2618,
     2808, 2796, 2786, 2775, 2780, 2774, 2775, 2787, 2640, 2784,
     2785, 2780, 2780, 2778, 2771, 2662, 2684, 2706, 2780, 2734,
     2784, 2756, 2767, 2778,  725,  751, 2761, 7934, 2780, 2765,
      735, 2774, 2773, 2769, 2820, 2842, 7934, 2749, 7934, 2864,

     2741, 2753, 2886, 2743, 2727, 2712, 2731, 2908, 2722, 7934,
     7934, 2710, 2701, 2696, 7934, 2698, 2706, 2705, 2930, 2952,
     2688, 2974, 2686, 2684, 2677, 2667, 2666, 2673, 2657, 2651,
     2646, 2635, 2996, 2648, 2623, 2628, 2614, 2618, 2620, 7934,
      731,  797, 2618, 2595, 2608, 2581, 2586, 2576, 2588, 7934,
     2583, 2576, 2575, 2569, 2573, 2585, 2571, 2570, 2578, 7934,
     7934, 2558, 2576, 2560, 7934, 2559, 2559, 2563, 2573, 3018,
     3040, 3062, 3084, 3106, 2568, 2573, 3128, 7934, 7934, 2572,
     2560, 7934, 3150, 3172, 2564, 7934, 2570, 2560, 2549, 2555,
     2541, 2545, 3194, 2538, 2537, 3216, 3238, 2509, 2507, 2512,

      726, 7934, 2496, 7934, 2500, 2504, 7934, 3260, 7934, 2487,
     3282, 7934, 2471, 3304, 2479, 7934, 3326, 3348, 3370, 2464,
     3392, 2468, 2447, 2457, 3414, 3456, 3478, 2447, 3500, 7934,
     3522, 7934, 7934, 2445, 2441, 2440, 7934, 7934, 7934, 2425,
     3544, 3566, 2409, 2427, 7934, 2417, 2405, 2388, 2397, 2377,
     2377, 2367, 2366, 3588, 2362, 2369, 2360, 2359, 2347, 7934,
     7934, 2336, 7934, 2336, 2320, 2327, 2320, 2314, 3610,   99,
     7934, 7934, 3632,  127,  162,  218,  245,  255,  316,  329,
      376, 7934, 7934,  512, 7934, 3654,  544,  535,  621,  642,
     7934, 3676,  661,  685,  715,  768,  736, 7934, 7934,  735,

      750, 3698,  765,  756,  776, 7934,  786, 3720, 3742,  794,
      777,  806, 3764, 3786, 7934, 3808, 3830,  805,  820,  809,
      806, 7934, 7934, 7934,  803, 3872, 7934,  803, 7934,  822,
     7934,  828,  838,  811,  807,  812,  823,  824,  845,  848,
      839, 7934, 7934,  851, 7934,  861, 3922, 7934,  857, 3944,
     3966,  867, 7934,  877,  885,  886, 3988,  898,  884, 4010,
     7934, 7934,  911, 7934,  918, 4032, 4054,  910, 4076,  904,
      924,  905,  908,  913, 7934, 4098,  925,  911, 4120,  930,
      917,  931,  942,  942,  953,  963,  964,  977,  969,  986,
      972, 1043, 4142, 1034,  983,  989,  998, 1000, 1021, 1022,

     4164, 4186, 1030, 4208, 4230, 1041, 4262, 1046, 1031, 7934,
     7934, 7934, 7934, 7934, 1038, 1039, 7934, 1043, 4284, 7934,
     7934, 4306, 1054, 1037, 4328, 4350, 1057, 1056, 7934, 1042,
     1055, 7934, 7934, 1068, 4372, 1060, 1081, 1086, 1079, 1064,
     1083, 7934, 4394, 7934, 1082, 7934, 4416, 7934, 7934, 7934,
     1077, 7934, 4438, 4480, 4502, 7934, 1093, 7934, 7934, 1093,
     7934, 7934, 4524, 1093, 1085, 4546, 7934, 7934, 4568, 1085,
     1090, 4590, 1092, 1098, 1115, 1120, 1113, 1111, 7934, 1141,
     1126, 1137, 4612, 1140, 1152, 1153, 4634, 1163, 1166, 4656,
     7934, 1167, 7934, 4678, 1172, 4700, 4722, 4764, 1170, 4786,

     1154, 1161, 7934, 1171, 1162, 1158, 1165, 7934, 1171, 1176,
     4808, 7934, 1181, 1182, 1170, 7934, 1167, 1184, 1187, 1199,
     1181, 7934, 7934, 4830, 1197, 4852, 7934, 7934, 7934, 7934,
     4874, 1211, 1204, 1216, 4896, 1226, 7934, 1209, 1215, 1230,
     1233, 1249, 1233, 1221, 1223, 1221, 1223, 1229, 1227, 1244,
     1235, 1234, 7934, 4918, 7934, 7934, 1254, 4940, 4967, 4989,
     7934, 1257, 1267, 7934, 1277, 5011, 1268, 7934, 7934, 5033,
     7934, 5055, 1284, 1289, 5087, 1289, 7934, 5109, 5131, 7934,
     5154, 1300, 1297, 1303, 1312, 1322, 1334, 1316, 1336, 5176,
     5198, 5220, 1336, 1335, 7934, 1335, 1321, 1322, 1342, 1326,

     1340, 1341, 1327, 7934, 7934, 1345, 7934, 7934, 1334, 5242,
     7934, 1338, 5264, 5286, 5308, 1351, 7934, 7934, 1347, 1328,
     7934, 7934, 1334, 5330, 1340, 1347, 1340, 7934, 5352, 1367,
     1359, 1364, 5374, 1375, 7934, 1377, 7934, 1376, 7934, 1383,
     7934, 7934, 1382, 1373, 7934, 5396, 1381, 7934, 7934, 1368,
     5418, 7934, 1384, 1376, 1376, 5440, 1387, 5462, 1386, 1376,
     5484, 7934, 5506, 1383, 1393, 7934, 5528, 1377, 7934, 1387,
     7934, 1376, 7934, 7934, 1403, 7934, 1399, 7934, 5550, 1394,
     5572, 1397, 1420, 1417, 1422, 5594, 7934, 1419, 1434, 1443,
     5617, 5639, 1438, 1439, 1464, 7934, 5661, 7934, 7934, 1452,

     5683, 5705, 7934, 1462, 1473, 1490, 5727, 1487, 1511, 5749,
     5771, 1492, 1492, 1505, 1500, 1496, 5793, 1502, 1516, 7934,
     1498, 7934, 5815, 7934, 7934, 1512, 1502, 5837, 7934, 1507,
     7934, 7934, 1507, 1509, 5859, 7934, 1510, 7934, 7934, 1521,
     7934, 5881, 1516, 1529, 1520, 1540, 1534, 1539, 1543, 7934,
     7934, 7934, 1559, 5903, 5925, 1557, 1564, 1557, 1552, 1575,
     1566, 5947, 5969, 1566, 7934, 5991, 7934, 7934, 7934, 1561,
     1562, 6013, 1578, 7934, 1566, 1560, 1577, 7934, 1567, 6035,
     1574, 7934, 6057, 1569, 1571, 1590, 1588, 6079, 7934, 1583,
     6101, 7934, 1584, 6123, 1594, 7934, 6145, 7934, 1604, 1614,

     7934, 7934, 1595, 1625, 7934, 6167, 6189, 1622, 1639, 6211,
     7934, 6233, 7934, 6255, 6277, 1628, 1645, 7934, 1647, 1638,
     1648, 1674, 7934, 7934, 1666, 1768, 6299, 7934, 1660, 7934,
     7934, 6321, 1677, 1680, 7934, 1687, 1727, 7934, 7934, 6343,
     1703, 1710, 1726, 6365, 7934, 6387, 1720, 1733, 7934, 1731,
     6409, 7934, 6432, 1738, 1742, 7934, 1759, 1773, 1766, 7934,
     1775, 1769, 1771, 6454, 6476, 1775, 1776, 1777, 7934, 7934,
     1765, 1781, 1760, 6498, 1766, 1782, 7934, 7934, 6520, 7934,
     1779, 1766, 7934, 6542, 6564, 6586, 1768, 6608, 7934, 6640,
     7934, 1783, 6662, 1790, 1776, 7934, 1799, 7934, 1787, 7934,

     6684, 7934, 1799, 6706, 6728, 1800, 7934, 7934, 1825, 1825,
     7934, 7934, 7934, 7934, 1831, 6750, 1824, 6772, 6794, 1832,
     1826, 6816, 1827, 7934, 6838, 7934, 1823, 1828, 1823, 7934,
     7934, 1828, 6860, 1829, 7934, 7934, 1840, 6882, 1842, 7934,
     1839, 7934, 6904, 6926, 1843, 1833, 1841, 1835, 1845, 6968,
     7934, 7934, 1855, 6990, 7012, 7034, 1851, 7056, 7934, 7078,
     1857, 7934, 1861, 1877, 7934, 7934, 7934, 1887, 7934, 1878,
     7934, 7100, 7934, 1883, 1881, 1894, 7122, 7934, 7144, 7934,
     7934, 7166, 1895, 1903, 7188, 7934, 1906, 7934, 7934, 1910,
     1917, 1913, 7934, 1914, 7934, 1924, 1925, 1926, 7210, 7934,

     7232, 1917, 7934, 7254, 1928, 7934, 7934, 7276, 1920, 1930,
     1931, 7298, 1933, 7934, 1924, 7934, 7934, 7934, 7320, 7934,
     7934, 1919, 1928, 1936, 7342, 1928, 7934, 1920, 1942, 1940,
     7934, 7934, 7934, 1950, 1936, 7934, 1956, 1949, 1966, 7364,
     7386, 1962, 1987, 1987, 7934, 7934, 1988, 7934, 1989, 7934,
     2006, 7408, 7430, 7934, 2009, 7472, 7934, 7494, 2019, 2011,
     7934, 7516, 2028, 2029, 7538, 7560, 2030, 2035, 2019, 2017,
     7934, 7934, 2023, 7582, 2026, 7604, 2034, 7626, 7934, 7934,
     2022, 2025, 7934, 7934, 7648, 7670, 7934, 2039, 2031, 7934,
     7934, 2041, 2027, 7692, 2028, 2048, 7934, 7714, 7934, 2030,

     7934, 2050, 7736, 7934, 7934, 2041, 7758, 2042, 7780, 7934,
     2061, 2064, 7934, 2069, 2065, 7934, 7802, 7934, 7824, 7934,
     7846, 2083, 7868, 2073, 7934, 7934, 7934, 2071, 7934, 7890,
     2097, 7934, 2089, 2093, 2103, 2117, 2118, 2113, 2116, 2121,
     2146, 2146, 2145, 2161, 2157, 2161, 2186, 2185, 2193, 2171,
     2194, 2204, 2193, 2207, 2214, 2216, 2227, 2227, 2221, 2225,
     2222, 2227, 2217, 2236, 2224, 2232, 2248, 2245, 2251, 2265,
     2261, 2284, 2266, 2281, 2279, 2279, 7934, 7934, 7913, 7917,
     7921, 2328, 2338, 7925, 7929
    } ;

static yyconst short int yy_def[1786] =
    {   0,
     1778,    1, 1779, 1779, 1779,    5, 1778, 1778, 1778, 1780,
     1778, 1781, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1783, 1778, 1784, 1781, 1778, 1785, 1778, 1778, 1778, 1778,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1778, 1778, 1778, 1778, 1783, 1784, 1784, 1785,
     1778, 1778, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1778, 1782, 1778, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1778, 1778, 1778, 1782, 1782,
     1778, 1778, 1782, 1778, 1782, 1782, 1778, 1778, 1778, 1778,
     1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1778, 1778, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782,
     1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1778, 1782, 1778, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1778, 1782, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,

     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1778, 1778, 1782, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1778, 1782,

     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1778, 1782,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1778, 1782, 1778, 1782, 1782, 1778, 1782, 1778, 1782,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1782, 1778, 1778, 1782, 1782, 1782, 1778, 1778, 1778, 1782,
     1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1778, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1778, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1778, 1782, 1778, 1782, 1782, 1782, 1782, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1778, 1782,

     1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1778, 1778, 1782, 1782, 1778, 1782, 1778, 1782,
     1778, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1778, 1782, 1778, 1782, 1782, 1778, 1782, 1782,
     1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1778, 1778, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1778, 1778, 1778, 1778, 1782, 1782, 1778, 1782, 1782, 1778,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782,
     1782, 1778, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1778, 1782, 1778, 1782, 1778, 1778, 1778,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1778, 1778, 1782,
     1778, 1778, 1782, 1782, 1782, 1782, 1778, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1778, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1778, 1782, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782,
     1782, 1778, 1778, 1782, 1782, 1782, 1778, 1778, 1778, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1778, 1778, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1778, 1782, 1778, 1778, 1782, 1782, 1782, 1782,
     1778, 1782, 1782, 1778, 1782, 1782, 1782, 1778, 1778, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1782, 1778, 1778, 1782, 1778, 1778, 1782, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1778, 1778, 1782, 1782,
     1778, 1778, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1778, 1782, 1778, 1782, 1778, 1782,
     1778, 1778, 1782, 1782, 1778, 1782, 1782, 1778, 1778, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782, 1778, 1782,
     1778, 1782, 1778, 1778, 1782, 1778, 1782, 1778, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1778, 1782, 1778, 1778, 1782,

     1782, 1782, 1778, 1782, 1778, 1782, 1782, 1782, 1778, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1782, 1778, 1782, 1778, 1778, 1782, 1782, 1782, 1778, 1782,
     1778, 1778, 1782, 1782, 1782, 1778, 1782, 1778, 1778, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778,
     1778, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1778, 1782, 1778, 1778, 1778, 1782,
     1782, 1782, 1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1778, 1782, 1782,

     1778, 1778, 1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782,
     1778, 1782, 1778, 1782, 1782, 1782, 1782, 1778, 1782, 1782,
     1782, 1782, 1778, 1778, 1782, 1782, 1782, 1778, 1782, 1778,
     1778, 1782, 1778, 1782, 1778, 1782, 1778, 1778, 1778, 1782,
     1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1778, 1782,
     1782, 1778, 1782, 1782, 1782, 1778, 1782, 1782, 1782, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1778,
     1782, 1782, 1782, 1782, 1782, 1782, 1778, 1778, 1782, 1778,
     1782, 1782, 1778, 1782, 1782, 1782, 1782, 1782, 1778, 1782,
     1778, 1782, 1782, 1782, 1782, 1778, 1782, 1778, 1782, 1778,

     1782, 1778, 1782, 1782, 1782, 1782, 1778, 1778, 1782, 1782,
     1778, 1778, 1778, 1778, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1778, 1782, 1778, 1778, 1782, 1782, 1778,
     1778, 1782, 1782, 1782, 1778, 1778, 1782, 1782, 1782, 1778,
     1782, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1778, 1778, 1782, 1782, 1782, 1782, 1782, 1782, 1778, 1782,
     1782, 1778, 1782, 1782, 1778, 1778, 1778, 1782, 1778, 1782,
     1778, 1782, 1778, 1782, 1782, 1782, 1782, 1778, 1782, 1778,
     1778, 1782, 1782, 1782, 1782, 1778, 1782, 1778, 1778, 1782,
     1782, 1782, 1778, 1782, 1778, 1778, 1782, 1782, 1782, 1778,

     1782, 1782, 1778, 1782, 1782, 1778, 1778, 1782, 1782, 1782,
     1782, 1782, 1782, 1778, 1782, 1778, 1778, 1778, 1782, 1778,
     1778, 1782, 1782, 1782, 1782, 1782, 1778, 1782, 1782, 1782,
     1778, 1778, 1778, 1782, 1782, 1778, 1782, 1782, 1782, 1782,
     1782, 1778, 1782, 1782, 1778, 1778, 1782, 1778, 1782, 1778,
     1782, 1782, 1782, 1778, 1782, 1782, 1778, 1782, 1782, 1782,
     1778, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1778, 1778, 1778, 1782, 1782, 1782, 1782, 1782, 1778, 1778,
     1782, 1782, 1778, 1778, 1782, 1782, 1778, 1782, 1782, 1778,
     1778, 1782, 1782, 1782, 1782, 1778, 1778, 1782, 1778, 1782,

     1778, 1782, 1782, 1778, 1778, 1782, 1782, 1782, 1782, 1778,
     1782, 1778, 1778, 1782, 1782, 1778, 1782, 1778, 1782, 1778,
     1782, 1778, 1782, 1782, 1778, 1778, 1778, 1778, 1778, 1782,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778,    0, 1778, 1778,
     1778, 1778, 1778, 1778, 1778
    } ;

static yyconst short int yy_nxt[7987] =
    {   0,
        8,    9,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   21,   22,   23,   24,   25,
       26,   27,   28,    8,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   52,
        8,    8,   54,   54,   72,   72,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   78,   78,   64,   65,   66,
       67,   68,   69,   70,   54,   54,   79,   80,   55,   56,
       57,   58,   59,   60,   61,   62,   63,  203,  203,   64,
       65,   66,   67,   68,   69,   70,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   76, 1092,  126,   77,   77,   83,   84,   85,
      204,  205,   72,   72,  218,  134,   93,   86,  127,   87,
       94,  135,  219,   88,   89,   90,   91,   92,   97,   95,
      104, 1094,   98,  122,  105,   99,   96,  243,  106,  100,
      123,  244,  101,  124,  107,  102,  125,  108,  103,  109,
      109,  212,  212,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  213,  213,  109,  109,  109,  109,  109,  109,
      109,  128,  216,  129,  130,  217,  239,  240,  220, 1095,

      131,  132,  241,  110,  194,  111,  133,  242,  195,  137,
      112,  138,  196,  139,  268,  113,  114,  140,  143,  221,
      115,  327,  269,  141,  116,  328,  144,  117,  142,  118,
      119,  190,  145,  120,  288,  147,  121,  148,  146,  149,
      289,  331,  191,  257,  192,  234,  168,  193,  258,  150,
      169,  332,  235, 1096,  170,  151,  152,  153,  236,  154,
      171,  172,  160,  314,  293,  173,  161,  155,  315,  156,
      162,  157, 1097,  163,  158,  159,  164,  197,  294,  165,
      198,  199,  166,  174,  334,  175,  380,  200,  176,  177,
      201,  335,  264,  178,  265,  179,  381,  180, 1098,  184,

      181,  182,  274,  185,  275,  183,  186,  187,  276,  266,
      267,  284,  367,  188,  285,  277,  189,  223,  223,  278,
      368,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      231,  232,  223,  223,  223,  223,  223,  223,  223,  317,
      320,  322,  224,  321,  233,  323,  329,  318,  225,  342,
      343,  376,  324, 1099,  409,  319,  410,  330,  226,  227,
      227,  325,  377,  227,  227,  227,  227,  227,  227,  227,
      227,  227, 1100,  398,  227,  227,  227,  227,  227,  227,
      227,  350,  228,  238,  238,  399,  395,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  351,  396,  238,  238,

      238,  238,  238,  238,  238,  246,  247,  402,  259,  356,
      260,  203,  203,  261,  403, 1101,  248,  249,  250,  262,
      357,  358,  251,  252,  253,  254,  263,  283,  283,  411,
      627,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      628,  412,  283,  283,  283,  283,  283,  283,  283,  291,
      291,  426,  209,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  338,  593,  291,  291,  291,  291,  291,  291,
      291,  382,  339,  363,  594,  387,  468,  364,  340,  469,
      383,  341,  388,  365,  392,  384,  212,  212,  385,  416,
      393,  292,  301,  301,  389,  417,  301,  301,  301,  301,

      301,  301,  301,  301,  301,   82,   82,  301,  301,  301,
      301,  301,  301,  301,   82,   82,   82,  302,  303,   82,
       82,   82,   82,  304,   82,   82,   82,   82,  305,   82,
      306,   82,   82,  307,  308,   82,   82,   82,   82,   82,
       82,  309,  309,  406, 1102,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  427,  427,  309,  309,  309,  309,
      309,  309,  309,  407,  413,  455,  466,  456,  414,  484,
      493, 1104,  415,  485,  494,  467, 1105,  540,  310,  346,
      346,  541,  457,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  514,  500,  346,  346,  346,  346,  346,  346,

      346,  663,  605,  664,  606,  515,  501,  347,  348,  348,
      502,  607,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  470,  519,  348,  348,  348,  348,  348,  348,  348,
      608,  609,  471,  614,  657,  658,  520,  472,  473,  617,
      474,  615,  349,  352,  352, 1106,  618,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  649,  660,  352,  352,
      352,  352,  352,  352,  352,  814,  661,  802,  802,  353,
      360,  360,  650,  815,  360,  360,  360,  360,  360,  360,
      360,  360,  360, 1107,  480,  360,  360,  360,  360,  360,
      360,  360,  370,  602,  672,  673,  681,  371,  481,  482,

      483,  678, 1109,  682,  798,  679,  603,  372,  799,  604,
      373,  821,  822,  374,  404,  404,  800,  674,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  801, 1110,  404,
      404,  404,  404,  404,  404,  404,  405,  428,  428,  933,
      933,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      886, 1111,  428,  428,  428,  428,  428,  428,  428,  685,
      982,  685,  686,  686,  887,  686,  686,  937, 1037, 1112,
     1112, 1038,  983,  938,  429,  431,  431, 1113, 1114,  431,
      431,  431,  431,  431,  431,  431,  431,  431, 1115, 1117,
      431,  431,  431,  431,  431,  431,  431,  432,  432, 1118,

     1119,  432,  432,  432,  432,  432,  432,  432,  432,  432,
     1121, 1120,  432,  432,  432,  432,  432,  432,  432,  433,
      434,  434, 1124, 1125,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  984, 1126,  434,  434,  434,  434,  434,
      434,  434, 1132,  985, 1133,  986, 1134, 1135, 1136, 1139,
     1140, 1141, 1142, 1142, 1143, 1144, 1145,  435,  437,  437,
     1146, 1147,  437,  437,  437,  437,  437,  437,  437,  437,
      437, 1148, 1149,  437,  437,  437,  437,  437,  437,  437,
      438,  438, 1150, 1151,  438,  438,  438,  438,  438,  438,
      438,  438,  438, 1152, 1154,  438,  438,  438,  438,  438,

      438,  438,  439,  439, 1157, 1158,  439,  439,  439,  439,
      439,  439,  439,  439,  439, 1159, 1160,  439,  439,  439,
      439,  439,  439,  439,  440,  440, 1162, 1163,  440,  440,
      440,  440,  440,  440,  440,  440,  440, 1165, 1170,  440,
      440,  440,  440,  440,  440,  440, 1166, 1172, 1173, 1174,
     1167, 1175, 1176, 1178, 1179,  441,  446,  446, 1181, 1182,
      446,  446,  446,  446,  446,  446,  446,  446,  446, 1183,
     1184,  446,  446,  446,  446,  446,  446,  446,  452,  452,
     1185, 1186,  452,  452,  452,  452,  452,  452,  452,  452,
      452, 1187, 1188,  452,  452,  452,  452,  452,  452,  452,

      453,  476,  476, 1189, 1190,  476,  476,  476,  476,  476,
      476,  476,  476,  476, 1191, 1192,  476,  476,  476,  476,
      476,  476,  476,  477,  477, 1198, 1199,  477,  477,  477,
      477,  477,  477,  477,  477,  477, 1200, 1201,  477,  477,
      477,  477,  477,  477,  477,  486,  486, 1202, 1203,  486,
      486,  486,  486,  486,  486,  486,  486,  486, 1206, 1196,
      486,  486,  486,  486,  486,  486,  486, 1193,  689, 1210,
     1212, 1194,  690, 1197, 1213, 1214, 1215,  691, 1216, 1219,
     1220, 1223,  487,  692, 1224, 1225,  488,  490,  490,  693,
     1226,  490,  490,  490,  490,  490,  490,  490,  490,  490,

     1227, 1229,  490,  490,  490,  490,  490,  490,  490, 1230,
     1231, 1232, 1233, 1234, 1236, 1238, 1243, 1244,  491, 1246,
     1247,  492,  507,  507, 1250, 1251,  507,  507,  507,  507,
      507,  507,  507,  507,  507, 1253, 1254,  507,  507,  507,
      507,  507,  507,  507,  508,  513,  513, 1255, 1256,  513,
      513,  513,  513,  513,  513,  513,  513,  513, 1257, 1258,
      513,  513,  513,  513,  513,  513,  513,  521,  521, 1259,
     1260,  521,  521,  521,  521,  521,  521,  521,  521,  521,
     1261, 1263,  521,  521,  521,  521,  521,  521,  521, 1264,
     1265, 1267, 1268, 1270,  522, 1272, 1277, 1279, 1280, 1281,

     1282, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1291,  523,
      528,  528, 1292, 1293,  528,  528,  528,  528,  528,  528,
      528,  528,  528, 1294, 1295,  528,  528,  528,  528,  528,
      528,  528,  546,  546, 1297, 1300,  546,  546,  546,  546,
      546,  546,  546,  546,  546, 1301, 1302,  546,  546,  546,
      546,  546,  546,  546, 1304, 1305, 1306, 1307, 1308,  547,
     1309, 1310, 1309, 1311, 1312, 1313, 1314, 1315, 1316,  548,
      552,  552, 1317, 1318,  552,  552,  552,  552,  552,  552,
      552,  552,  552, 1319, 1321,  552,  552,  552,  552,  552,
      552,  552,  562,  562, 1326, 1327,  562,  562,  562,  562,

      562,  562,  562,  562,  562, 1328, 1330,  562,  562,  562,
      562,  562,  562,  562,  567,  567, 1334, 1335,  567,  567,
      567,  567,  567,  567,  567,  567,  567, 1337, 1342,  567,
      567,  567,  567,  567,  567,  567,  569,  569, 1343, 1344,
      569,  569,  569,  569,  569,  569,  569,  569,  569, 1345,
     1346,  569,  569,  569,  569,  569,  569,  569, 1347, 1348,
     1349, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
     1362, 1363, 1364, 1366, 1370, 1371, 1372, 1373, 1375,  570,
      571,  571, 1376, 1377,  571,  571,  571,  571,  571,  571,
      571,  571,  571, 1379, 1380,  571,  571,  571,  571,  571,

      571,  571, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1390,
     1391,  572, 1393, 1394, 1395, 1397, 1399, 1400, 1403, 1404,
     1406, 1407, 1408,  573,  582,  582, 1409, 1410,  582,  582,
      582,  582,  582,  582,  582,  582,  582, 1412, 1414,  582,
      582,  582,  582,  582,  582,  582,  583,  583, 1415, 1416,
      583,  583,  583,  583,  583,  583,  583,  583,  583, 1417,
     1420,  583,  583,  583,  583,  583,  583,  583,  588,  588,
     1421, 1422,  588,  588,  588,  588,  588,  588,  588,  588,
      588, 1425, 1426,  588,  588,  588,  588,  588,  588,  588,
      600,  600, 1427, 1429,  600,  600,  600,  600,  600,  600,

      600,  600,  600, 1432, 1433,  600,  600,  600,  600,  600,
      600,  600,  632,  632, 1434, 1436,  632,  632,  632,  632,
      632,  632,  632,  632,  632, 1437, 1437,  632,  632,  632,
      632,  632,  632,  632, 1440, 1441, 1442, 1443, 1444, 1446,
     1447, 1448, 1450, 1451, 1453, 1454, 1455, 1457, 1458,  633,
      636,  636, 1461, 1462,  636,  636,  636,  636,  636,  636,
      636,  636,  636, 1463, 1459,  636,  636,  636,  636,  636,
      636,  636,  640,  640, 1464, 1465,  640,  640,  640,  640,
      640,  640,  640,  640,  640, 1466, 1467,  640,  640,  640,
      640,  640,  640,  640, 1468, 1471, 1472,  641, 1473,  642,

     1474, 1475, 1476, 1479, 1481, 1482, 1484, 1485, 1486, 1487,
     1488, 1490, 1492,  643, 1493, 1494, 1495,  644,  648,  648,
     1497, 1499,  648,  648,  648,  648,  648,  648,  648,  648,
      648, 1501, 1503,  648,  648,  648,  648,  648,  648,  648,
      652,  652, 1504, 1505,  652,  652,  652,  652,  652,  652,
      652,  652,  652, 1506, 1509,  652,  652,  652,  652,  652,
      652,  652,  688,  688, 1510, 1515,  688,  688,  688,  688,
      688,  688,  688,  688,  688, 1516, 1517,  688,  688,  688,
      688,  688,  688,  688,  697,  697, 1518, 1519,  697,  697,
      697,  697,  697,  697,  697,  697,  697, 1520, 1521,  697,

      697,  697,  697,  697,  697,  697,  699,  699, 1525, 1527,
      699,  699,  699,  699,  699,  699,  699,  699,  699, 1528,
      700,  699,  699,  699,  699,  699,  699,  699,  710,  710,
     1529, 1532,  710,  710,  710,  710,  710,  710,  710,  710,
      710, 1530, 1530,  710,  710,  710,  710,  710,  710,  710,
      711,  711, 1533, 1534,  711,  711,  711,  711,  711,  711,
      711,  711,  711, 1537, 1538,  711,  711,  711,  711,  711,
      711,  711,  715,  715, 1539, 1543,  715,  715,  715,  715,
      715,  715,  715,  715,  715, 1544, 1545,  715,  715,  715,
      715,  715,  715,  715,  716,  717, 1522, 1546, 1547, 1548,

     1523, 1549, 1550, 1553, 1554, 1555, 1556, 1557, 1558, 1560,
     1561, 1563, 1564, 1568, 1572,  718,  740,  740, 1574, 1575,
      740,  740,  740,  740,  740,  740,  740,  740,  740, 1576,
     1577,  740,  740,  740,  740,  740,  740,  740,  741,  750,
      750, 1579, 1582,  750,  750,  750,  750,  750,  750,  750,
      750,  750, 1583, 1584,  750,  750,  750,  750,  750,  750,
      750, 1585, 1587, 1590, 1592, 1594, 1596, 1597, 1591, 1598,
     1599, 1601, 1602, 1604, 1605, 1609, 1610, 1611, 1612,  751,
      760,  760, 1613, 1615,  760,  760,  760,  760,  760,  760,
      760,  760,  760, 1619, 1622,  760,  760,  760,  760,  760,

      760,  760,  761,  761, 1623, 1624,  761,  761,  761,  761,
      761,  761,  761,  761,  761, 1625, 1626,  761,  761,  761,
      761,  761,  761,  761,  765,  765, 1628, 1629,  765,  765,
      765,  765,  765,  765,  765,  765,  765, 1630, 1634,  765,
      765,  765,  765,  765,  765,  765, 1635, 1637, 1638, 1639,
     1640, 1641, 1642, 1643, 1644, 1647, 1649, 1651, 1652, 1653,
     1655, 1656, 1658, 1659, 1660, 1662, 1663,  766,  778,  778,
     1664, 1665,  778,  778,  778,  778,  778,  778,  778,  778,
      778, 1666, 1667,  778,  778,  778,  778,  778,  778,  778,
      779,  779, 1668, 1669,  779,  779,  779,  779,  779,  779,

      779,  779,  779, 1670, 1673,  779,  779,  779,  779,  779,
      779,  779,  782,  782, 1674, 1675,  782,  782,  782,  782,
      782,  782,  782,  782,  782, 1676, 1677,  782,  782,  782,
      782,  782,  782,  782,  786,  786, 1678, 1682,  786,  786,
      786,  786,  786,  786,  786,  786,  786, 1685, 1686,  786,
      786,  786,  786,  786,  786,  786, 1688, 1689, 1692, 1693,
     1694, 1695, 1696, 1698, 1700, 1702, 1703, 1706, 1707, 1708,
     1709, 1711, 1712, 1714, 1715,  787,  804,  804, 1717, 1719,
      804,  804,  804,  804,  804,  804,  804,  804,  804, 1721,
     1722,  804,  804,  804,  804,  804,  804,  804,  807,  807,

     1723, 1724,  807,  807,  807,  807,  807,  807,  807,  807,
      807, 1728, 1730,  807,  807,  807,  807,  807,  807,  807,
      809,  809, 1731, 1733,  809,  809,  809,  809,  809,  809,
      809,  809,  809, 1734, 1735,  809,  809,  809,  809,  809,
      809,  809,  812,  812, 1736, 1737,  812,  812,  812,  812,
      812,  812,  812,  812,  812, 1738, 1739,  812,  812,  812,
      812,  812,  812,  812,  816,  816, 1740, 1741,  816,  816,
      816,  816,  816,  816,  816,  816,  816, 1742, 1743,  816,
      816,  816,  816,  816,  816,  816,  830,  830, 1744, 1745,
      830,  830,  830,  830,  830,  830,  830,  830,  830, 1746,

     1747,  830,  830,  830,  830,  830,  830,  830,  832,  832,
     1748, 1749,  832,  832,  832,  832,  832,  832,  832,  832,
      832, 1750, 1751,  832,  832,  832,  832,  832,  832,  832,
      833,  833, 1752, 1753,  833,  833,  833,  833,  833,  833,
      833,  833,  833, 1754, 1755,  833,  833,  833,  833,  833,
      833,  833, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
     1764,  834,  837,  837, 1765, 1766,  837,  837,  837,  837,
      837,  837,  837,  837,  837, 1767, 1768,  837,  837,  837,
      837,  837,  837,  837,  838,  838, 1769, 1770,  838,  838,
      838,  838,  838,  838,  838,  838,  838, 1771, 1772,  838,

      838,  838,  838,  838,  838,  838,  839,  839, 1773, 1774,
      839,  839,  839,  839,  839,  839,  839,  839,  839, 1775,
     1776,  839,  839,  839,  839,  839,  839,  839,  845,  845,
     1777,   82,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  207, 1090,  845,  845,  845,  845,  845,  845,  845,
      860,  860, 1089, 1088,  860,  860,  860,  860,  860,  860,
      860,  860,  860, 1087, 1086,  860,  860,  860,  860,  860,
      860,  860,  861,  861, 1085, 1084,  861,  861,  861,  861,
      861,  861,  861,  861,  861, 1083, 1082,  861,  861,  861,
      861,  861,  861,  861,  863,  863, 1081, 1080,  863,  863,

      863,  863,  863,  863,  863,  863,  863, 1078, 1077,  863,
      863,  863,  863,  863,  863,  863,  871,  871, 1076, 1075,
      871,  871,  871,  871,  871,  871,  871,  871,  871, 1074,
     1073,  871,  871,  871,  871,  871,  871,  871,  872,  872,
     1072, 1071,  872,  872,  872,  872,  872,  872,  872,  872,
      872, 1070, 1069,  872,  872,  872,  872,  872,  872,  872,
      882,  882, 1066, 1065,  882,  882,  882,  882,  882,  882,
      882,  882,  882, 1064, 1063,  882,  882,  882,  882,  882,
      882,  882,  883,  883, 1060, 1055,  883,  883,  883,  883,
      883,  883,  883,  883,  883, 1054, 1053,  883,  883,  883,

      883,  883,  883,  883,  885,  885, 1051, 1047,  885,  885,
      885,  885,  885,  885,  885,  885,  885, 1045, 1043,  885,
      885,  885,  885,  885,  885,  885,  891,  891, 1041, 1040,
      891,  891,  891,  891,  891,  891,  891,  891,  891, 1039,
     1036,  891,  891,  891,  891,  891,  891,  891,  898,  898,
     1035, 1034,  898,  898,  898,  898,  898,  898,  898,  898,
      898, 1031, 1030,  898,  898,  898,  898,  898,  898,  898,
      899,  899, 1028, 1027,  899,  899,  899,  899,  899,  899,
      899,  899,  899, 1026, 1025,  899,  899,  899,  899,  899,
      899,  899, 1024, 1023, 1022, 1019, 1018, 1016, 1015, 1009,

     1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000,  999,
      998,  900,  997,  996,  995,  994,  993,  992,  901,  906,
      906,  991,  990,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  989,  988,  906,  906,  906,  906,  906,  906,
      906,  915,  915,  987,  981,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  980,  979,  915,  915,  915,  915,
      915,  915,  915,  922,  922,  978,  977,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  976,  974,  922,  922,
      922,  922,  922,  922,  922,  923,  923,  973,  972,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  971,  970,

      923,  923,  923,  923,  923,  923,  923,  924,  924,  969,
      968,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      967,  966,  924,  924,  924,  924,  924,  924,  924,  965,
      963,  960,  959,  958,  925,  927,  927,  957,  956,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  955,  954,
      927,  927,  927,  927,  927,  927,  927,  929,  929,  952,
      951,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      950,  949,  929,  929,  929,  929,  929,  929,  929,  931,
      931,  947,  946,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  944,  941,  931,  931,  931,  931,  931,  931,

      931,  940,  939,  936,  935,  934,  930,  928,  926,  921,
      920,  919,  918,  917,  916,  914,  913,  912,  911,  910,
      932,  942,  942,  909,  908,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  907,  905,  942,  942,  942,  942,
      942,  942,  942,  943,  943,  904,  903,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  902,  897,  943,  943,
      943,  943,  943,  943,  943,  945,  945,  896,  895,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  894,  893,
      945,  945,  945,  945,  945,  945,  945,  948,  948,  892,
      890,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      889,  888,  948,  948,  948,  948,  948,  948,  948,  953,
      953,  884,  881,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  880,  879,  953,  953,  953,  953,  953,  953,
      953,  961,  961,  878,  877,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  876,  875,  961,  961,  961,  961,
      961,  961,  961,  962,  962,  874,  873,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  870,  869,  962,  962,
      962,  962,  962,  962,  962,  964,  964,  868,  867,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  866,  865,
      964,  964,  964,  964,  964,  964,  964,  975,  975,  864,

      862,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      859,  858,  975,  975,  975,  975,  975,  975,  975, 1010,
     1010,  857,  856, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010,  855,  854, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1011, 1011,  853,  852, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,  851,  850, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1012, 1012,  849,  848, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012,  847,  846, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1013, 1013,  844,  843, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,  842,  841,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1014, 1014,  840,
      836, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
      835,  831, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1017,
     1017,  829,  828, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017,  827,  826, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1020, 1020,  825,  824, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020,  823,  820, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1021, 1021,  819,  818, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021,  817,  813, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1029, 1029,  811,  810, 1029,

     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,  808,  806,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1032, 1032,  805,
      803, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
      797,  796, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1033,
     1033,  795,  794, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033,  793,  792, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1042, 1042,  791,  790, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042,  789,  788, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1044, 1044,  785,  784, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044,  783,  781, 1044, 1044,

     1044, 1044, 1044, 1044, 1044, 1046, 1046,  780,  777, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,  776,  775,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1048, 1048,  774,
      773, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
      772,  771, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1049,
     1049,  770,  769, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049,  768,  767, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1050, 1050,  764,  763, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050,  762,  759, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1052, 1052,  758,  757, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052,  756,  755, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1056, 1056,  754,  753, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,  752,  749,
     1056, 1056, 1056, 1056, 1056, 1056, 1056,  748,  747,  746,
      745,  744,  743,  742,  739,  738,  737,  736,  735,  734,
      733,  732,  731,  730,  729,  728, 1057, 1058, 1058,  727,
      726, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
      725,  724, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059,
     1059,  723,  722, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059,  721,  720, 1059, 1059, 1059, 1059, 1059, 1059,

     1059, 1061, 1061,  719,  714, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061,  713,  712, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1062, 1062,  709,  708, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062,  707,  706, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1067, 1067,  705,  704, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  703,  702,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068, 1068,  701,
      698, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
      696,  695, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1079,
     1079,  694,  687, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079,  684,  683, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1091, 1091,  680,  677, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091,  676,  675, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1093, 1093,  671,  670, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093,  669,  668, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1103, 1103,  667,  666, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,  665,  662,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1108, 1108,  659,
      656, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
      655,  654, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1116,

     1116,  653,  651, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116,  647,  646, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1122, 1122,  645,  639, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122,  638,  637, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1123, 1123,  635,  634, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123,  631,  630, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1127, 1127,  629,  626, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,  625,  624,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128, 1128,  623,
      622, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

      621,  620, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1129,
     1129,  619,  616, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129,  613,  612, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1130, 1130,  611,  610, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130,  601,  599, 1130, 1130, 1130, 1130,
     1130, 1130, 1130,  598,  597,  596,  595,  592,  591,  590,
      589,  587,  586,  585,  584,  581,  580,  579,  578,  577,
      576,  575, 1131, 1137, 1137,  574,  568, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137,  566,  565, 1137, 1137,
     1137, 1137, 1137, 1137, 1137,  564,  563,  561,  560,  559,

      558,  557,  556,  555,  554,  553,  551,  550,  549,  545,
      544,  543,  542,  539,  538,  537,  536,  535,  534,  533,
      532,  531, 1138, 1153, 1153,  530,  529, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,  527,  526, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1155, 1155,  525,  524, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,  518,  517,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156,  516,
      512, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
      511,  510, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1161,
     1161,  509,  506, 1161, 1161, 1161, 1161, 1161, 1161, 1161,

     1161, 1161,  505,  504, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1164, 1164,  503,  499, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164,  498,  497, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1168, 1168,  496,  495, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168,  489,  479, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1169, 1169,  478,  475, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,  465,  464,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1171, 1171,  463,
      462, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
      461,  460, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1177,

     1177,  459,  458, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177,  454,  451, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1180, 1180,  450,  449, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180,  448,  447, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1195, 1195,  445,  444, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195,  443,  442, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1204, 1204,  436,  430, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,  211,  209,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1205,  425,
      424, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,

      423,  422, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1207,
     1207,  421,  420, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207,  419,  418, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1208, 1208,  408,  401, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208,  400,  397, 1208, 1208, 1208, 1208,
     1208, 1208, 1208,  394,  391,  390,  386,  379,  378,  375,
      369,  366, 1209, 1211, 1211,  362,  361, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211,  359,  355, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1217, 1217,  354,  345, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,  344,  337,

     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1218, 1218,  336,
      333, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
      326,  316, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1221,
     1221,  313,  312, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221,  311,  300, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1222, 1222,  299,  298, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222,  297,  296, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1228, 1228,  295,  290, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228,  287,  286, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1235, 1235,  282,  281, 1235,

     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,  280,  279,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1237, 1237,  273,
      272, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
      271,  270, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1239,
     1239,  256,  255, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239,  245,  237, 1239, 1239, 1239, 1239, 1239, 1239,
     1239,  230,  229,  222,  215,  214,  211,   75,  209,  206,
      202,  167,  136,   81,   75, 1778, 1778, 1778, 1778, 1778,
     1240, 1241, 1241, 1778, 1778, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1778, 1778, 1241, 1241, 1241, 1241,

     1241, 1241, 1241, 1242, 1242, 1778, 1778, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1778, 1778, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1245, 1245, 1778, 1778, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1778, 1778,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1248, 1248, 1778,
     1778, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1778, 1778, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249,
     1249, 1778, 1778, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1778, 1778, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1252, 1252, 1778, 1778, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1778, 1778, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1262, 1262, 1778, 1778, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1778, 1778, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1266, 1266, 1778, 1778, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1778, 1778,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1269, 1269, 1778,
     1778, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1778, 1778, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1271,
     1271, 1778, 1778, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1778, 1778, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1273, 1273, 1778, 1778, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1778, 1778, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1274, 1274, 1778, 1778, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1778, 1778, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1275, 1276, 1276, 1778, 1778, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1778, 1778,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1278, 1278, 1778,
     1778, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,

     1778, 1778, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1287,
     1287, 1778, 1778, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1778, 1778, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1296, 1296, 1778, 1778, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1778, 1778, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1298, 1298, 1778, 1778, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1778, 1778, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1299, 1299, 1778, 1778, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1778, 1778,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1303, 1303, 1778,

     1778, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1778, 1778, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1320,
     1320, 1778, 1778, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1778, 1778, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1322, 1322, 1778, 1778, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1778, 1778, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1778, 1778, 1778, 1778, 1323, 1324, 1324,
     1778, 1778, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1778, 1778, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1325, 1325, 1778, 1778, 1325, 1325, 1325, 1325, 1325, 1325,

     1325, 1325, 1325, 1778, 1778, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1329, 1329, 1778, 1778, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1778, 1778, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1331, 1331, 1778, 1778, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1778, 1778, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332, 1778, 1778,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1778,
     1778, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1333, 1336, 1336,
     1778, 1778, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,

     1336, 1778, 1778, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1338, 1338, 1778, 1778, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1778, 1778, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1339, 1339, 1778, 1778, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1778, 1778, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1340, 1341, 1341, 1778, 1778, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1778, 1778,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1350, 1350, 1778,
     1778, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1778, 1778, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1351,

     1351, 1778, 1778, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1778, 1778, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1352, 1352, 1778, 1778, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1778, 1778, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1365, 1365, 1778, 1778, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1778, 1778, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1367, 1367, 1778, 1778, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1778, 1778,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368, 1778,
     1778, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1778, 1778, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369,
     1369, 1778, 1778, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1778, 1778, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1374, 1374, 1778, 1778, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1778, 1778, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1378, 1378, 1778, 1778, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1778, 1778, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1382, 1382, 1778, 1778, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1778, 1778,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1389, 1389, 1778,

     1778, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1778, 1778, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1392,
     1392, 1778, 1778, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1778, 1778, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1396, 1396, 1778, 1778, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1778, 1778, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1398, 1398, 1778, 1778, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1778, 1778, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1401, 1401, 1778, 1778, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1778, 1778,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402, 1402, 1778,
     1778, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1778, 1778, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1405,
     1405, 1778, 1778, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1778, 1778, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1411, 1411, 1778, 1778, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1778, 1778, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1413, 1413, 1778, 1778, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1778, 1778, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1418, 1418, 1778, 1778, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1778, 1778,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1423, 1423,
     1778, 1778, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1778, 1778, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1424, 1424, 1778, 1778, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1778, 1778, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1428, 1428, 1778, 1778, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1778, 1778, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1430, 1430, 1778, 1778, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1778, 1778, 1430,

     1430, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1778, 1778,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1778,
     1778, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1435, 1435,
     1778, 1778, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1778, 1778, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1438, 1438, 1778, 1778, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1778, 1778, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1439, 1439, 1778, 1778, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1778, 1778, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1445, 1445, 1778, 1778, 1445, 1445,

     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1778, 1778, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1449, 1449, 1778, 1778,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1778,
     1778, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1452, 1452,
     1778, 1778, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1778, 1778, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1456, 1456, 1778, 1778, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1778, 1778, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1460, 1460, 1778, 1778, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1778, 1778, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1469, 1469, 1778, 1778, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1778, 1778, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1778, 1778,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1778,
     1778, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1477, 1477,
     1778, 1778, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1778, 1778, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1478, 1478, 1778, 1778, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1778, 1778, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1480, 1480, 1778, 1778, 1480, 1480, 1480, 1480,

     1480, 1480, 1480, 1480, 1480, 1778, 1778, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1483, 1483, 1778, 1778, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1778, 1778, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1489, 1489, 1778, 1778,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1778,
     1778, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1491, 1491,
     1778, 1778, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1778, 1778, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1496, 1496, 1778, 1778, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1778, 1778, 1496, 1496, 1496, 1496, 1496,

     1496, 1496, 1498, 1498, 1778, 1778, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1778, 1778, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1500, 1500, 1778, 1778, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1778, 1778, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1502, 1502, 1778, 1778,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1778,
     1778, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1507, 1507,
     1778, 1778, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1778, 1778, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1508, 1508, 1778, 1778, 1508, 1508, 1508, 1508, 1508, 1508,

     1508, 1508, 1508, 1778, 1778, 1508, 1508, 1508, 1508, 1508,
     1508, 1508, 1511, 1511, 1778, 1778, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1778, 1778, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1512, 1512, 1778, 1778, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1778, 1778, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513, 1778, 1778,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1778,
     1778, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1514, 1514,
     1778, 1778, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1778, 1778, 1514, 1514, 1514, 1514, 1514, 1514, 1514,

     1524, 1524, 1778, 1778, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1778, 1778, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1526, 1526, 1778, 1778, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1778, 1778, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1531, 1531, 1778, 1778, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1778, 1778, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1535, 1535, 1778, 1778,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1778,
     1778, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536,
     1778, 1778, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,

     1536, 1778, 1778, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1540, 1540, 1778, 1778, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1778, 1778, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1541, 1542, 1542, 1778, 1778, 1542, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1778, 1778, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1551, 1551, 1778, 1778, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1778, 1778,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552, 1778,
     1778, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1778, 1778, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1559,

     1559, 1778, 1778, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1778, 1778, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1562, 1562, 1778, 1778, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1778, 1778, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1565, 1565, 1778, 1778, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1778, 1778, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1566, 1566, 1778, 1778, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1778, 1778,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1778,
     1778, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,

     1778, 1778, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1569,
     1569, 1778, 1778, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1778, 1778, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1570, 1571, 1571, 1778, 1778, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1778, 1778, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1573, 1573, 1778, 1778, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1778, 1778, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1578, 1578, 1778, 1778, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1778, 1778,

     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1580, 1580, 1778,
     1778, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1778, 1778, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1581,
     1581, 1778, 1778, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1778, 1778, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1586, 1586, 1778, 1778, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1778, 1778, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1588, 1588, 1778, 1778, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1778, 1778, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1589, 1589, 1778, 1778, 1589,

     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1778, 1778,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1593, 1593, 1778,
     1778, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1778, 1778, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1595,
     1595, 1778, 1778, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1778, 1778, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1600, 1600, 1778, 1778, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1778, 1778, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1603, 1603, 1778, 1778, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1778, 1778, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1606, 1606, 1778, 1778, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1778, 1778,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1607, 1607, 1778,
     1778, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1778, 1778, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1608, 1614,
     1614, 1778, 1778, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1778, 1778, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1616, 1616, 1778, 1778, 1616, 1616, 1616, 1616, 1616,

     1616, 1616, 1616, 1616, 1778, 1778, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1617, 1617, 1778, 1778, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1778, 1778, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1618, 1618, 1778, 1778, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1778, 1778,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1620, 1620, 1778,
     1778, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1778, 1778, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621,
     1621, 1778, 1778, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1778, 1778, 1621, 1621, 1621, 1621, 1621, 1621,

     1621, 1627, 1627, 1778, 1778, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1778, 1778, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1631, 1631, 1778, 1778, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1778, 1778, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1632, 1632, 1778, 1778, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1778, 1778,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1633, 1633, 1778,
     1778, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1778, 1778, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1636,
     1636, 1778, 1778, 1636, 1636, 1636, 1636, 1636, 1636, 1636,

     1636, 1636, 1778, 1778, 1636, 1636, 1636, 1636, 1636, 1636,
     1636, 1645, 1645, 1778, 1778, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1778, 1778, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1646, 1646, 1778, 1778, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1778, 1778, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1648, 1648, 1778, 1778, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1778, 1778,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1650, 1650, 1778,
     1778, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1778, 1778, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1654,

     1654, 1778, 1778, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1778, 1778, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1657, 1657, 1778, 1778, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1778, 1778, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1661, 1661, 1778, 1778, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1778, 1778, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1671, 1671, 1778, 1778, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1778, 1778,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1778,
     1778, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1778, 1778, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1679,
     1679, 1778, 1778, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1778, 1778, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1680, 1680, 1778, 1778, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1778, 1778, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1681, 1683, 1683, 1778, 1778, 1683, 1683, 1683,
     1683, 1683, 1683, 1683, 1683, 1683, 1778, 1778, 1683, 1683,
     1683, 1683, 1683, 1683, 1683, 1684, 1684, 1778, 1778, 1684,

     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1778, 1778,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1687, 1687, 1778,
     1778, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1778, 1778, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1690,
     1690, 1778, 1778, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1778, 1778, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1691, 1691, 1778, 1778, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1778, 1778, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1697, 1697, 1778, 1778, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1778, 1778, 1697, 1697,

     1697, 1697, 1697, 1697, 1697, 1699, 1699, 1778, 1778, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1778, 1778,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1701, 1701, 1778,
     1778, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1778, 1778, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1704,
     1704, 1778, 1778, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1778, 1778, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1705, 1705, 1778, 1778, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1778, 1778, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1710, 1710, 1778, 1778, 1710, 1710, 1710,

     1710, 1710, 1710, 1710, 1710, 1710, 1778, 1778, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1713, 1713, 1778, 1778, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1778, 1778,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1716, 1716, 1778,
     1778, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
     1778, 1778, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1718,
     1718, 1778, 1778, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1778, 1778, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1720, 1720, 1778, 1778, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1720, 1778, 1778, 1720, 1720, 1720, 1720,

     1720, 1720, 1720, 1725, 1725, 1778, 1778, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1778, 1778, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1726, 1726, 1778, 1778, 1726,
     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1778, 1778,
     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1727, 1727, 1778,
     1778, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1778, 1778, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1729,
     1729, 1778, 1778, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1729, 1778, 1778, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1732, 1732, 1778, 1778, 1732, 1732, 1732, 1732, 1732,

     1732, 1732, 1732, 1732, 1778, 1778, 1732, 1732, 1732, 1732,
     1732, 1732, 1732,    8,    8,    8,    8,   73,   73, 1778,
       73,   74,   74,   74,   74,  208, 1778,  208,  208,  210,
      210,  210,  210,    7, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778
    } ;

static yyconst short int yy_chk[7987] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    9,    9,    3,    3,    3,    3,
        3,    3,    3,    3,    3,   21,   21,    3,    3,    3,
        3,    3,    3,    3,    4,    4,   24,   24,    4,    4,
        4,    4,    4,    4,    4,    4,    4,   54,   54,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   18,  870,   36,   18,   18,   29,   29,   29,
       66,   66,   72,   72,   86,   38,   30,   29,   36,   29,
       30,   38,   86,   29,   29,   29,   29,   29,   31,   30,
       32,  874,   31,   35,   32,   31,   30,   99,   32,   31,
       35,   99,   31,   35,   32,   31,   35,   32,   31,   33,
       33,   77,   77,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   78,   78,   33,   33,   33,   33,   33,   33,
       33,   37,   85,   37,   37,   85,   97,   97,   87,  875,

       37,   37,   98,   33,   50,   33,   37,   98,   50,   40,
       33,   40,   50,   40,  107,   33,   34,   40,   41,   87,
       34,  143,  107,   40,   34,  143,   41,   34,   40,   34,
       34,   49,   41,   34,  122,   42,   34,   42,   41,   42,
      122,  145,   49,  104,   49,   94,   46,   49,  104,   42,
       46,  145,   94,  876,   46,   42,   43,   43,   94,   43,
       46,   46,   44,  137,  125,   46,   44,   43,  137,   43,
       44,   43,  877,   44,   43,   43,   44,   51,  125,   44,
       51,   51,   44,   47,  147,   47,  174,   51,   47,   47,
       51,  147,  106,   47,  106,   47,  174,   47,  878,   48,

       47,   47,  113,   48,  113,   47,   48,   48,  113,  106,
      106,  119,  167,   48,  119,  113,   48,   89,   89,  113,
      167,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       93,   93,   89,   89,   89,   89,   89,   89,   89,  139,
      140,  141,   89,  140,   93,  141,  144,  139,   89,  151,
      151,  171,  141,  879,  191,  139,  191,  144,   89,   90,
       90,  141,  171,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  880,  184,   90,   90,   90,   90,   90,   90,
       90,  156,   90,   96,   96,  184,  182,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  156,  182,   96,   96,

       96,   96,   96,   96,   96,  101,  101,  187,  105,  160,
      105,  203,  203,  105,  187,  881,  101,  101,  101,  105,
      160,  160,  101,  101,  101,  101,  105,  118,  118,  192,
      381,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      381,  192,  118,  118,  118,  118,  118,  118,  118,  124,
      124,  209,  209,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  150,  354,  124,  124,  124,  124,  124,  124,
      124,  175,  150,  165,  354,  177,  249,  165,  150,  249,
      175,  150,  177,  165,  180,  175,  212,  212,  175,  194,
      180,  124,  132,  132,  177,  194,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  133,  133,  189,  884,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  213,  213,  133,  133,  133,  133,
      133,  133,  133,  189,  193,  239,  248,  239,  193,  257,
      261,  887,  193,  257,  261,  248,  888,  303,  133,  154,
      154,  303,  239,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  278,  267,  154,  154,  154,  154,  154,  154,

      154,  409,  364,  409,  364,  278,  267,  154,  155,  155,
      267,  364,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  250,  282,  155,  155,  155,  155,  155,  155,  155,
      365,  365,  250,  370,  405,  405,  282,  250,  250,  372,
      250,  370,  155,  157,  157,  889,  372,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  397,  407,  157,  157,
      157,  157,  157,  157,  157,  561,  407,  548,  548,  157,
      162,  162,  397,  561,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  890,  256,  162,  162,  162,  162,  162,
      162,  162,  169,  363,  417,  417,  423,  169,  256,  256,

      256,  421,  893,  423,  545,  421,  363,  169,  545,  363,
      169,  570,  570,  169,  188,  188,  547,  417,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  547,  894,  188,
      188,  188,  188,  188,  188,  188,  188,  214,  214,  685,
      685,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      641,  895,  214,  214,  214,  214,  214,  214,  214,  427,
      741,  427,  427,  427,  641,  686,  686,  691,  801,  896,
      896,  801,  741,  691,  214,  216,  216,  897,  900,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  901,  903,
      216,  216,  216,  216,  216,  216,  216,  217,  217,  904,

      905,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      907,  905,  217,  217,  217,  217,  217,  217,  217,  217,
      218,  218,  910,  911,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  742,  912,  218,  218,  218,  218,  218,
      218,  218,  918,  742,  919,  742,  920,  921,  925,  928,
      930,  932,  933,  933,  934,  935,  936,  218,  220,  220,
      937,  938,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  939,  940,  220,  220,  220,  220,  220,  220,  220,
      221,  221,  941,  944,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  946,  949,  221,  221,  221,  221,  221,

      221,  221,  222,  222,  952,  954,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  955,  956,  222,  222,  222,
      222,  222,  222,  222,  224,  224,  958,  959,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  963,  968,  224,
      224,  224,  224,  224,  224,  224,  965,  970,  971,  972,
      965,  973,  974,  977,  978,  224,  230,  230,  980,  981,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  982,
      983,  230,  230,  230,  230,  230,  230,  230,  236,  236,
      984,  985,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  986,  987,  236,  236,  236,  236,  236,  236,  236,

      236,  252,  252,  988,  989,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  990,  991,  252,  252,  252,  252,
      252,  252,  252,  253,  253,  995,  996,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  997,  998,  253,  253,
      253,  253,  253,  253,  253,  258,  258,  999, 1000,  258,
      258,  258,  258,  258,  258,  258,  258,  258, 1003,  994,
      258,  258,  258,  258,  258,  258,  258,  992,  433, 1006,
     1008,  992,  433,  994, 1009, 1015, 1016,  433, 1018, 1023,
     1024, 1027,  258,  433, 1028, 1030,  258,  260,  260,  433,
     1031,  260,  260,  260,  260,  260,  260,  260,  260,  260,

     1034, 1036,  260,  260,  260,  260,  260,  260,  260, 1037,
     1038, 1039, 1040, 1041, 1045, 1051, 1057, 1060,  260, 1064,
     1065,  260,  272,  272, 1070, 1071,  272,  272,  272,  272,
      272,  272,  272,  272,  272, 1073, 1074,  272,  272,  272,
      272,  272,  272,  272,  272,  277,  277, 1075, 1076,  277,
      277,  277,  277,  277,  277,  277,  277,  277, 1077, 1078,
      277,  277,  277,  277,  277,  277,  277,  284,  284, 1080,
     1081,  284,  284,  284,  284,  284,  284,  284,  284,  284,
     1082, 1084,  284,  284,  284,  284,  284,  284,  284, 1085,
     1086, 1088, 1089, 1092,  284, 1095, 1099, 1101, 1102, 1104,

     1105, 1106, 1107, 1109, 1110, 1113, 1114, 1115, 1117,  284,
      289,  289, 1118, 1119,  289,  289,  289,  289,  289,  289,
      289,  289,  289, 1120, 1121,  289,  289,  289,  289,  289,
      289,  289,  308,  308, 1125, 1132,  308,  308,  308,  308,
      308,  308,  308,  308,  308, 1133, 1134,  308,  308,  308,
      308,  308,  308,  308, 1136, 1138, 1139, 1140, 1141,  308,
     1142, 1143, 1142, 1144, 1145, 1146, 1147, 1148, 1149,  308,
      313,  313, 1150, 1151,  313,  313,  313,  313,  313,  313,
      313,  313,  313, 1152, 1157,  313,  313,  313,  313,  313,
      313,  313,  323,  323, 1162, 1163,  323,  323,  323,  323,

      323,  323,  323,  323,  323, 1165, 1167,  323,  323,  323,
      323,  323,  323,  323,  328,  328, 1173, 1174,  328,  328,
      328,  328,  328,  328,  328,  328,  328, 1176, 1182,  328,
      328,  328,  328,  328,  328,  328,  330,  330, 1183, 1184,
      330,  330,  330,  330,  330,  330,  330,  330,  330, 1185,
     1186,  330,  330,  330,  330,  330,  330,  330, 1187, 1188,
     1189, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1206, 1209, 1212, 1216, 1219, 1220, 1223, 1225,  330,
      331,  331, 1226, 1227,  331,  331,  331,  331,  331,  331,
      331,  331,  331, 1230, 1231,  331,  331,  331,  331,  331,

      331,  331, 1232, 1234, 1236, 1238, 1240, 1243, 1244, 1247,
     1250,  331, 1253, 1254, 1255, 1257, 1259, 1260, 1264, 1265,
     1268, 1270, 1272,  331,  340,  340, 1275, 1277,  340,  340,
      340,  340,  340,  340,  340,  340,  340, 1280, 1282,  340,
      340,  340,  340,  340,  340,  340,  341,  341, 1283, 1284,
      341,  341,  341,  341,  341,  341,  341,  341,  341, 1285,
     1288,  341,  341,  341,  341,  341,  341,  341,  347,  347,
     1289, 1290,  347,  347,  347,  347,  347,  347,  347,  347,
      347, 1293, 1294,  347,  347,  347,  347,  347,  347,  347,
      361,  361, 1295, 1300,  361,  361,  361,  361,  361,  361,

      361,  361,  361, 1304, 1305,  361,  361,  361,  361,  361,
      361,  361,  385,  385, 1306, 1308,  385,  385,  385,  385,
      385,  385,  385,  385,  385, 1309, 1309,  385,  385,  385,
      385,  385,  385,  385, 1312, 1313, 1314, 1315, 1316, 1318,
     1319, 1321, 1326, 1327, 1330, 1333, 1334, 1337, 1340,  385,
      388,  388, 1343, 1344,  388,  388,  388,  388,  388,  388,
      388,  388,  388, 1345, 1340,  388,  388,  388,  388,  388,
      388,  388,  392,  392, 1346, 1347,  392,  392,  392,  392,
      392,  392,  392,  392,  392, 1348, 1349,  392,  392,  392,
      392,  392,  392,  392, 1353, 1356, 1357,  392, 1358,  392,

     1359, 1360, 1361, 1364, 1370, 1371, 1373, 1375, 1376, 1377,
     1379, 1381, 1384,  392, 1385, 1386, 1387,  392,  396,  396,
     1390, 1393,  396,  396,  396,  396,  396,  396,  396,  396,
      396, 1395, 1399,  396,  396,  396,  396,  396,  396,  396,
      399,  399, 1400, 1403,  399,  399,  399,  399,  399,  399,
      399,  399,  399, 1404, 1408,  399,  399,  399,  399,  399,
      399,  399,  430,  430, 1409, 1416,  430,  430,  430,  430,
      430,  430,  430,  430,  430, 1417, 1419,  430,  430,  430,
      430,  430,  430,  430,  442,  442, 1420, 1421,  442,  442,
      442,  442,  442,  442,  442,  442,  442, 1422, 1425,  442,

      442,  442,  442,  442,  442,  442,  444,  444, 1429, 1433,
      444,  444,  444,  444,  444,  444,  444,  444,  444, 1434,
      444,  444,  444,  444,  444,  444,  444,  444,  456,  456,
     1436, 1441,  456,  456,  456,  456,  456,  456,  456,  456,
      456, 1437, 1437,  456,  456,  456,  456,  456,  456,  456,
      457,  457, 1442, 1443,  457,  457,  457,  457,  457,  457,
      457,  457,  457, 1447, 1448,  457,  457,  457,  457,  457,
      457,  457,  461,  461, 1450, 1454,  461,  461,  461,  461,
      461,  461,  461,  461,  461, 1455, 1457,  461,  461,  461,
      461,  461,  461,  461,  461,  461, 1426, 1458, 1459, 1461,

     1426, 1462, 1463, 1466, 1467, 1468, 1471, 1472, 1473, 1475,
     1476, 1481, 1482, 1487, 1492,  461,  485,  485, 1494, 1495,
      485,  485,  485,  485,  485,  485,  485,  485,  485, 1497,
     1499,  485,  485,  485,  485,  485,  485,  485,  485,  496,
      496, 1503, 1506,  496,  496,  496,  496,  496,  496,  496,
      496,  496, 1509, 1510,  496,  496,  496,  496,  496,  496,
      496, 1515, 1517, 1520, 1521, 1523, 1527, 1528, 1520, 1529,
     1532, 1534, 1537, 1539, 1541, 1545, 1546, 1547, 1548,  496,
      505,  505, 1549, 1553,  505,  505,  505,  505,  505,  505,
      505,  505,  505, 1557, 1561,  505,  505,  505,  505,  505,

      505,  505,  506,  506, 1563, 1564,  506,  506,  506,  506,
      506,  506,  506,  506,  506, 1568, 1570,  506,  506,  506,
      506,  506,  506,  506,  511,  511, 1574, 1575,  511,  511,
      511,  511,  511,  511,  511,  511,  511, 1576, 1583,  511,
      511,  511,  511,  511,  511,  511, 1584, 1587, 1590, 1591,
     1592, 1594, 1596, 1597, 1598, 1602, 1605, 1609, 1610, 1611,
     1613, 1615, 1622, 1623, 1624, 1626, 1628,  511,  525,  525,
     1629, 1630,  525,  525,  525,  525,  525,  525,  525,  525,
      525, 1634, 1635,  525,  525,  525,  525,  525,  525,  525,
      526,  526, 1637, 1638,  526,  526,  526,  526,  526,  526,

      526,  526,  526, 1639, 1642,  526,  526,  526,  526,  526,
      526,  526,  530,  530, 1643, 1644,  530,  530,  530,  530,
      530,  530,  530,  530,  530, 1647, 1649,  530,  530,  530,
      530,  530,  530,  530,  534,  534, 1651, 1655,  534,  534,
      534,  534,  534,  534,  534,  534,  534, 1659, 1660,  534,
      534,  534,  534,  534,  534,  534, 1663, 1664, 1667, 1668,
     1669, 1670, 1673, 1675, 1677, 1681, 1682, 1688, 1689, 1692,
     1693, 1695, 1696, 1700, 1702,  534,  550,  550, 1706, 1708,
      550,  550,  550,  550,  550,  550,  550,  550,  550, 1711,
     1712,  550,  550,  550,  550,  550,  550,  550,  554,  554,

     1714, 1715,  554,  554,  554,  554,  554,  554,  554,  554,
      554, 1722, 1724,  554,  554,  554,  554,  554,  554,  554,
      556,  556, 1728, 1731,  556,  556,  556,  556,  556,  556,
      556,  556,  556, 1733, 1734,  556,  556,  556,  556,  556,
      556,  556,  559,  559, 1735, 1736,  559,  559,  559,  559,
      559,  559,  559,  559,  559, 1737, 1738,  559,  559,  559,
      559,  559,  559,  559,  563,  563, 1739, 1740,  563,  563,
      563,  563,  563,  563,  563,  563,  563, 1741, 1742,  563,
      563,  563,  563,  563,  563,  563,  579,  579, 1743, 1744,
      579,  579,  579,  579,  579,  579,  579,  579,  579, 1745,

     1746,  579,  579,  579,  579,  579,  579,  579,  581,  581,
     1747, 1748,  581,  581,  581,  581,  581,  581,  581,  581,
      581, 1749, 1750,  581,  581,  581,  581,  581,  581,  581,
      584,  584, 1751, 1752,  584,  584,  584,  584,  584,  584,
      584,  584,  584, 1753, 1754,  584,  584,  584,  584,  584,
      584,  584, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
     1763,  584,  587,  587, 1764, 1765,  587,  587,  587,  587,
      587,  587,  587,  587,  587, 1766, 1767,  587,  587,  587,
      587,  587,  587,  587,  589,  589, 1768, 1769,  589,  589,
      589,  589,  589,  589,  589,  589,  589, 1770, 1771,  589,

      589,  589,  589,  589,  589,  589,  590,  590, 1772, 1773,
      590,  590,  590,  590,  590,  590,  590,  590,  590, 1774,
     1775,  590,  590,  590,  590,  590,  590,  590,  596,  596,
     1776, 1782,  596,  596,  596,  596,  596,  596,  596,  596,
      596, 1783,  868,  596,  596,  596,  596,  596,  596,  596,
      612,  612,  867,  866,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  865,  864,  612,  612,  612,  612,  612,
      612,  612,  613,  613,  862,  859,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  858,  857,  613,  613,  613,
      613,  613,  613,  613,  615,  615,  856,  855,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  853,  852,  615,
      615,  615,  615,  615,  615,  615,  623,  623,  851,  850,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  849,
      848,  623,  623,  623,  623,  623,  623,  623,  624,  624,
      847,  846,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  844,  843,  624,  624,  624,  624,  624,  624,  624,
      635,  635,  840,  836,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  835,  834,  635,  635,  635,  635,  635,
      635,  635,  637,  637,  828,  824,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  823,  822,  637,  637,  637,

      637,  637,  637,  637,  639,  639,  820,  815,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  813,  810,  639,
      639,  639,  639,  639,  639,  639,  645,  645,  806,  805,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  803,
      800,  645,  645,  645,  645,  645,  645,  645,  654,  654,
      799,  798,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  795,  794,  654,  654,  654,  654,  654,  654,  654,
      655,  655,  792,  791,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  790,  789,  655,  655,  655,  655,  655,
      655,  655,  788,  787,  785,  781,  780,  776,  775,  769,

      768,  767,  766,  764,  763,  762,  759,  758,  757,  756,
      755,  655,  754,  753,  752,  751,  749,  748,  655,  660,
      660,  747,  746,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  745,  744,  660,  660,  660,  660,  660,  660,
      660,  669,  669,  743,  739,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  738,  737,  669,  669,  669,  669,
      669,  669,  669,  676,  676,  736,  735,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  734,  732,  676,  676,
      676,  676,  676,  676,  676,  677,  677,  731,  730,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  729,  728,

      677,  677,  677,  677,  677,  677,  677,  678,  678,  727,
      726,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      725,  724,  678,  678,  678,  678,  678,  678,  678,  723,
      721,  718,  717,  716,  678,  680,  680,  714,  713,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  712,  709,
      680,  680,  680,  680,  680,  680,  680,  682,  682,  707,
      706,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      705,  704,  682,  682,  682,  682,  682,  682,  682,  684,
      684,  702,  701,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  698,  694,  684,  684,  684,  684,  684,  684,

      684,  693,  692,  690,  689,  687,  683,  681,  679,  675,
      674,  673,  672,  671,  670,  668,  667,  666,  665,  664,
      684,  695,  695,  663,  662,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  661,  659,  695,  695,  695,  695,
      695,  695,  695,  696,  696,  658,  657,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  656,  653,  696,  696,
      696,  696,  696,  696,  696,  700,  700,  651,  650,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  649,  647,
      700,  700,  700,  700,  700,  700,  700,  703,  703,  646,
      644,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      643,  642,  703,  703,  703,  703,  703,  703,  703,  708,
      708,  638,  634,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  633,  631,  708,  708,  708,  708,  708,  708,
      708,  719,  719,  630,  629,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  628,  627,  719,  719,  719,  719,
      719,  719,  719,  720,  720,  626,  625,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  622,  621,  720,  720,
      720,  720,  720,  720,  720,  722,  722,  620,  619,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  618,  617,
      722,  722,  722,  722,  722,  722,  722,  733,  733,  616,

      614,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      611,  610,  733,  733,  733,  733,  733,  733,  733,  770,
      770,  609,  608,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  607,  606,  770,  770,  770,  770,  770,  770,
      770,  771,  771,  605,  604,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  603,  602,  771,  771,  771,  771,
      771,  771,  771,  772,  772,  601,  599,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  598,  597,  772,  772,
      772,  772,  772,  772,  772,  773,  773,  595,  594,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  593,  592,

      773,  773,  773,  773,  773,  773,  773,  774,  774,  591,
      586,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      585,  580,  774,  774,  774,  774,  774,  774,  774,  777,
      777,  578,  577,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  576,  575,  777,  777,  777,  777,  777,  777,
      777,  783,  783,  574,  573,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  572,  568,  783,  783,  783,  783,
      783,  783,  783,  784,  784,  566,  565,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  564,  560,  784,  784,
      784,  784,  784,  784,  784,  793,  793,  558,  557,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  555,  553,
      793,  793,  793,  793,  793,  793,  793,  796,  796,  551,
      549,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      544,  543,  796,  796,  796,  796,  796,  796,  796,  797,
      797,  542,  541,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  540,  539,  797,  797,  797,  797,  797,  797,
      797,  808,  808,  538,  537,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  536,  535,  808,  808,  808,  808,
      808,  808,  808,  811,  811,  533,  532,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  531,  529,  811,  811,

      811,  811,  811,  811,  811,  814,  814,  527,  524,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  523,  522,
      814,  814,  814,  814,  814,  814,  814,  817,  817,  520,
      519,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      518,  517,  817,  817,  817,  817,  817,  817,  817,  818,
      818,  516,  515,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  514,  512,  818,  818,  818,  818,  818,  818,
      818,  819,  819,  510,  509,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  508,  504,  819,  819,  819,  819,
      819,  819,  819,  821,  821,  503,  502,  821,  821,  821,

      821,  821,  821,  821,  821,  821,  501,  500,  821,  821,
      821,  821,  821,  821,  821,  825,  825,  499,  498,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  497,  495,
      825,  825,  825,  825,  825,  825,  825,  494,  493,  492,
      491,  489,  488,  487,  484,  483,  482,  481,  480,  479,
      478,  475,  474,  473,  472,  471,  825,  826,  826,  470,
      469,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      468,  467,  826,  826,  826,  826,  826,  826,  826,  827,
      827,  466,  465,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  464,  463,  827,  827,  827,  827,  827,  827,

      827,  829,  829,  462,  460,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  459,  458,  829,  829,  829,  829,
      829,  829,  829,  831,  831,  455,  454,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  453,  451,  831,  831,
      831,  831,  831,  831,  831,  841,  841,  450,  449,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  448,  447,
      841,  841,  841,  841,  841,  841,  841,  842,  842,  445,
      443,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      441,  436,  842,  842,  842,  842,  842,  842,  842,  854,
      854,  435,  429,  854,  854,  854,  854,  854,  854,  854,

      854,  854,  425,  424,  854,  854,  854,  854,  854,  854,
      854,  869,  869,  422,  420,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  419,  418,  869,  869,  869,  869,
      869,  869,  869,  873,  873,  416,  415,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  414,  413,  873,  873,
      873,  873,  873,  873,  873,  886,  886,  412,  411,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  410,  408,
      886,  886,  886,  886,  886,  886,  886,  892,  892,  406,
      403,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      402,  401,  892,  892,  892,  892,  892,  892,  892,  902,

      902,  400,  398,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  395,  394,  902,  902,  902,  902,  902,  902,
      902,  908,  908,  393,  391,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  390,  389,  908,  908,  908,  908,
      908,  908,  908,  909,  909,  387,  386,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  384,  383,  909,  909,
      909,  909,  909,  909,  909,  913,  913,  382,  380,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  379,  378,
      913,  913,  913,  913,  913,  913,  913,  914,  914,  377,
      376,  914,  914,  914,  914,  914,  914,  914,  914,  914,

      375,  374,  914,  914,  914,  914,  914,  914,  914,  916,
      916,  373,  371,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  369,  368,  916,  916,  916,  916,  916,  916,
      916,  917,  917,  367,  366,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  362,  359,  917,  917,  917,  917,
      917,  917,  917,  358,  357,  356,  355,  353,  351,  350,
      349,  345,  344,  343,  342,  339,  338,  337,  336,  335,
      334,  333,  917,  926,  926,  332,  329,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  327,  326,  926,  926,
      926,  926,  926,  926,  926,  325,  324,  322,  321,  320,

      319,  318,  317,  316,  315,  314,  312,  311,  310,  307,
      306,  305,  304,  302,  300,  299,  298,  297,  296,  295,
      294,  293,  926,  947,  947,  292,  290,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  288,  287,  947,  947,
      947,  947,  947,  947,  947,  950,  950,  286,  285,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  281,  280,
      950,  950,  950,  950,  950,  950,  950,  951,  951,  279,
      276,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      275,  274,  951,  951,  951,  951,  951,  951,  951,  957,
      957,  273,  271,  957,  957,  957,  957,  957,  957,  957,

      957,  957,  270,  269,  957,  957,  957,  957,  957,  957,
      957,  960,  960,  268,  266,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  265,  264,  960,  960,  960,  960,
      960,  960,  960,  966,  966,  263,  262,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  259,  255,  966,  966,
      966,  966,  966,  966,  966,  967,  967,  254,  251,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  247,  246,
      967,  967,  967,  967,  967,  967,  967,  969,  969,  245,
      244,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      243,  242,  969,  969,  969,  969,  969,  969,  969,  976,

      976,  241,  240,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  237,  235,  976,  976,  976,  976,  976,  976,
      976,  979,  979,  234,  233,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  232,  231,  979,  979,  979,  979,
      979,  979,  979,  993,  993,  229,  228,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  226,  225,  993,  993,
      993,  993,  993,  993,  993, 1001, 1001,  219,  215, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,  210,  208,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002,  202,
      201, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

      200,  199, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1004,
     1004,  198,  197, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004,  196,  195, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1005, 1005,  190,  186, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005,  185,  183, 1005, 1005, 1005, 1005,
     1005, 1005, 1005,  181,  179,  178,  176,  173,  172,  170,
      168,  166, 1005, 1007, 1007,  164,  163, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007,  161,  159, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1019, 1019,  158,  153, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,  152,  149,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1022, 1022,  148,
      146, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
      142,  138, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1025,
     1025,  136,  135, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025,  134,  131, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1026, 1026,  130,  129, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026,  128,  127, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1035, 1035,  126,  123, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035,  121,  120, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1043, 1043,  117,  116, 1043,

     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,  115,  114,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1047, 1047,  112,
      111, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
      110,  108, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1053,
     1053,  103,  102, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053,  100,   95, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,   92,   91,   88,   84,   83,   76,   74,   73,   68,
       53,   45,   39,   26,   12,    7,    0,    0,    0,    0,
     1053, 1054, 1054,    0,    0, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054,    0,    0, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1055, 1055,    0,    0, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055,    0,    0, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1063, 1063,    0,    0, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,    0,    0,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1066, 1066,    0,
        0, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
        0,    0, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1069,
     1069,    0,    0, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069,    0,    0, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1072, 1072,    0,    0, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072,    0,    0, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1083, 1083,    0,    0, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083,    0,    0, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1087, 1087,    0,    0, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,    0,    0,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1090, 1090,    0,
        0, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
        0,    0, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1094,
     1094,    0,    0, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094,    0,    0, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1096, 1096,    0,    0, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,    0,    0, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1097, 1097,    0,    0, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097,    0,    0, 1097, 1097,
     1097, 1097, 1097, 1097, 1097,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1097, 1098, 1098,    0,    0, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,    0,    0,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1100, 1100,    0,
        0, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

        0,    0, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1111,
     1111,    0,    0, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111,    0,    0, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1124, 1124,    0,    0, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124,    0,    0, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1126, 1126,    0,    0, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126,    0,    0, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1131, 1131,    0,    0, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,    0,    0,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1135, 1135,    0,

        0, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
        0,    0, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1154,
     1154,    0,    0, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154,    0,    0, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1158, 1158,    0,    0, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158,    0,    0, 1158, 1158, 1158, 1158,
     1158, 1158, 1158,    0,    0,    0,    0, 1158, 1159, 1159,
        0,    0, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159,    0,    0, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1160, 1160,    0,    0, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160,    0,    0, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1166, 1166,    0,    0, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166,    0,    0, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1170, 1170,    0,    0, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170,    0,    0, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1172, 1172,    0,    0,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,    0,
        0, 1172, 1172, 1172, 1172, 1172, 1172, 1172,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1172, 1175, 1175,
        0,    0, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1175,    0,    0, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1178, 1178,    0,    0, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178,    0,    0, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1179, 1179,    0,    0, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179,    0,    0, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1181, 1181,    0,    0, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,    0,    0,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1190, 1190,    0,
        0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
        0,    0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191,

     1191,    0,    0, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191,    0,    0, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1192, 1192,    0,    0, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192,    0,    0, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1210, 1210,    0,    0, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210,    0,    0, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1213, 1213,    0,    0, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,    0,    0,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214, 1214,    0,
        0, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

        0,    0, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215,
     1215,    0,    0, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215,    0,    0, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1224, 1224,    0,    0, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224,    0,    0, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1229, 1229,    0,    0, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229,    0,    0, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1233, 1233,    0,    0, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,    0,    0,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1246, 1246,    0,

        0, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
        0,    0, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1251,
     1251,    0,    0, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251,    0,    0, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1256, 1256,    0,    0, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256,    0,    0, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1258, 1258,    0,    0, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258,    0,    0, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1261, 1261,    0,    0, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,    0,    0,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1263, 1263,    0,
        0, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
        0,    0, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1267,
     1267,    0,    0, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267,    0,    0, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1279, 1279,    0,    0, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279,    0,    0, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1281, 1281,    0,    0, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281,    0,    0, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1286, 1286,    0,    0, 1286,

     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,    0,    0,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1291, 1291,
        0,    0, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291,    0,    0, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1292, 1292,    0,    0, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292,    0,    0, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1297, 1297,    0,    0, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297,    0,    0, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1301, 1301,    0,    0, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301,    0,    0, 1301,

     1301, 1301, 1301, 1301, 1301, 1301, 1302, 1302,    0,    0,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,    0,
        0, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1307, 1307,
        0,    0, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307,    0,    0, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1310, 1310,    0,    0, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310,    0,    0, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1311, 1311,    0,    0, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311,    0,    0, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1317, 1317,    0,    0, 1317, 1317,

     1317, 1317, 1317, 1317, 1317, 1317, 1317,    0,    0, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1323, 1323,    0,    0,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,    0,
        0, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1328, 1328,
        0,    0, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328,    0,    0, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1335, 1335,    0,    0, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335,    0,    0, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1342, 1342,    0,    0, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342,    0,    0, 1342, 1342, 1342,

     1342, 1342, 1342, 1342, 1354, 1354,    0,    0, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354,    0,    0, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355,    0,    0,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,    0,
        0, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1362, 1362,
        0,    0, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362,    0,    0, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1363, 1363,    0,    0, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363,    0,    0, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1366, 1366,    0,    0, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366,    0,    0, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1372, 1372,    0,    0, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372,    0,    0, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1380, 1380,    0,    0,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,    0,
        0, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1383, 1383,
        0,    0, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383,    0,    0, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1388, 1388,    0,    0, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388,    0,    0, 1388, 1388, 1388, 1388, 1388,

     1388, 1388, 1391, 1391,    0,    0, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391,    0,    0, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1394, 1394,    0,    0, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394,    0,    0, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1397, 1397,    0,    0,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,    0,
        0, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1406, 1406,
        0,    0, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406,    0,    0, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1407, 1407,    0,    0, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407,    0,    0, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1410, 1410,    0,    0, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410,    0,    0, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1412, 1412,    0,    0, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412,    0,    0, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1414, 1414,    0,    0,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,    0,
        0, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415,
        0,    0, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415,    0,    0, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1427, 1427,    0,    0, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427,    0,    0, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1432, 1432,    0,    0, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432,    0,    0, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1440, 1440,    0,    0, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440,    0,    0, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1444, 1444,    0,    0,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,    0,
        0, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1446, 1446,
        0,    0, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446,    0,    0, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1451, 1451,    0,    0, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451,    0,    0, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1453, 1453,    0,    0, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453,    0,    0, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1464, 1464,    0,    0, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,    0,    0,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465,    0,
        0, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
        0,    0, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1474,

     1474,    0,    0, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474,    0,    0, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1479, 1479,    0,    0, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479,    0,    0, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1484, 1484,    0,    0, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484,    0,    0, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1485, 1485,    0,    0, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,    0,    0,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486,    0,
        0, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,

        0,    0, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1488,
     1488,    0,    0, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488,    0,    0, 1488, 1488, 1488, 1488, 1488, 1488,
     1488,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1488, 1490, 1490,    0,    0, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490,    0,    0, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1493, 1493,    0,    0, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493,    0,    0, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1501, 1501,    0,    0, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,    0,    0,

     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1504, 1504,    0,
        0, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
        0,    0, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505,
     1505,    0,    0, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505,    0,    0, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1516, 1516,    0,    0, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516,    0,    0, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1518, 1518,    0,    0, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518,    0,    0, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1519, 1519,    0,    0, 1519,

     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,    0,    0,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1522, 1522,    0,
        0, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
        0,    0, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1525,
     1525,    0,    0, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1525,    0,    0, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1533, 1533,    0,    0, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533,    0,    0, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1538, 1538,    0,    0, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538,    0,    0, 1538, 1538,

     1538, 1538, 1538, 1538, 1538, 1543, 1543,    0,    0, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,    0,    0,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544,    0,
        0, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
        0,    0, 1544, 1544, 1544, 1544, 1544, 1544, 1544,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1544, 1550,
     1550,    0,    0, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1550,    0,    0, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1554, 1554,    0,    0, 1554, 1554, 1554, 1554, 1554,

     1554, 1554, 1554, 1554,    0,    0, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1555, 1555,    0,    0, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555,    0,    0, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1556, 1556,    0,    0, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,    0,    0,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1558, 1558,    0,
        0, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
        0,    0, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1560,
     1560,    0,    0, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560,    0,    0, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1572, 1572,    0,    0, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572,    0,    0, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1577, 1577,    0,    0, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577,    0,    0, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1579, 1579,    0,    0, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,    0,    0,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1582, 1582,    0,
        0, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
        0,    0, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1585,
     1585,    0,    0, 1585, 1585, 1585, 1585, 1585, 1585, 1585,

     1585, 1585,    0,    0, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1599, 1599,    0,    0, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1599,    0,    0, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1601, 1601,    0,    0, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1601,    0,    0, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1604, 1604,    0,    0, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,    0,    0,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1608, 1608,    0,
        0, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
        0,    0, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1612,

     1612,    0,    0, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612,    0,    0, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1619, 1619,    0,    0, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619,    0,    0, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1625, 1625,    0,    0, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625,    0,    0, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1640, 1640,    0,    0, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,    0,    0,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1641, 1641,    0,
        0, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,

        0,    0, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1652,
     1652,    0,    0, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652,    0,    0, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1653, 1653,    0,    0, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653,    0,    0, 1653, 1653, 1653, 1653,
     1653, 1653, 1653,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1653, 1656, 1656,    0,    0, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656,    0,    0, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1658, 1658,    0,    0, 1658,

     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,    0,    0,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1662, 1662,    0,
        0, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
        0,    0, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1665,
     1665,    0,    0, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665,    0,    0, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1666, 1666,    0,    0, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666,    0,    0, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1674, 1674,    0,    0, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674,    0,    0, 1674, 1674,

     1674, 1674, 1674, 1674, 1674, 1676, 1676,    0,    0, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,    0,    0,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1678, 1678,    0,
        0, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
        0,    0, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1685,
     1685,    0,    0, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1685,    0,    0, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1686, 1686,    0,    0, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686,    0,    0, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1694, 1694,    0,    0, 1694, 1694, 1694,

     1694, 1694, 1694, 1694, 1694, 1694,    0,    0, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1698, 1698,    0,    0, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,    0,    0,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1703, 1703,    0,
        0, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
        0,    0, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1707,
     1707,    0,    0, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707,    0,    0, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1709, 1709,    0,    0, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1709,    0,    0, 1709, 1709, 1709, 1709,

     1709, 1709, 1709, 1717, 1717,    0,    0, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717,    0,    0, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1719, 1719,    0,    0, 1719,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,    0,    0,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1721, 1721,    0,
        0, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
        0,    0, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1723,
     1723,    0,    0, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723,    0,    0, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1730, 1730,    0,    0, 1730, 1730, 1730, 1730, 1730,

     1730, 1730, 1730, 1730,    0,    0, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1779, 1779, 1779, 1779, 1780, 1780,    0,
     1780, 1781, 1781, 1781, 1781, 1784,    0, 1784, 1784, 1785,
     1785, 1785, 1785, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
#include "CqlSqlInclude.h"
#include "CqlSqlBisonParser.h"
	int len;
	char *scannerPtr;
	int commentLevel;
	int cqlYyInput( SqlHandle*, char*, int );
	static int yy_get_next_buffer( SqlHandle* );

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT
#undef YY_DECL
#define YY_DECL int yylex( SqlHandle *dbsql )
#undef YY_INPUT
#define YY_INPUT(b,r,ms) (r = cqlYyInput(dbsql,b,ms))
#undef yywrap
#define yywrap() dbsql->parse()->yywrap()
#define DelimOrSep 1

#define Name 2


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#ifdef YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1779 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7934 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
return AMPERSAND;
	YY_BREAK
case 2:
YY_RULE_SETUP
return SEMICOLON;
	YY_BREAK
case 3:
YY_RULE_SETUP
return ASTERISK;
	YY_BREAK
case 4:
YY_RULE_SETUP
return ARITHMETIC_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
return ARITHMETIC_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
return SLASH;
	YY_BREAK
case 7:
YY_RULE_SETUP
return LEFTPAREN;
	YY_BREAK
case 8:
YY_RULE_SETUP
return RIGHTPAREN;
	YY_BREAK
case 9:
YY_RULE_SETUP
return DOT;
	YY_BREAK
case 10:
YY_RULE_SETUP
return DOLLAR_SIGN;
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_EQUAL;
	return EQUAL;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_NOT_EQUAL;
	return NOT_EQUAL;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER;
	return GREATER_THAN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER_OR_EQUAL;
	return GREATER_OR_EQUAL;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS_OR_EQUAL;
	return LESS_OR_EQUAL;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS;
	return LESS_THAN;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
return SINGLE_QUOTE;
	YY_BREAK
case 18:
YY_RULE_SETUP
return QUESTION_MARK;
	YY_BREAK
case 19:
YY_RULE_SETUP
return COLON;
	YY_BREAK
case 20:
YY_RULE_SETUP
return COMMA;
	YY_BREAK
case 21:
YY_RULE_SETUP
{
	sscanf( yytext, "%d", &yylval.integerValue );
	return SIGNED_INTEGER;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
	yylval.uiwlz = Parser::createUiwz( yytext );
	return FOUR_DIGITS;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
	yylval.uiwlz = Parser::createUiwz( yytext );
	return THREE_DIGITS;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
	yylval.uiwlz = Parser::createUiwz( yytext );
	return TWO_DIGITS;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
	yylval.uiwlz = Parser::createUiwz( yytext );
	return UNSIGNED_INTEGER;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
	char digitBuffer[ 10 ];
	digitBuffer[ 0 ] = yytext[ 0 ];
	digitBuffer[ 1 ] = yytext[ 1 ];
	digitBuffer[ 2 ] = yytext[ 2 ];
	digitBuffer[ 3 ] = yytext[ 3 ];
	digitBuffer[ 4 ] = 0;
	sscanf( digitBuffer, "%hd", &yylval.dateLiteral_.year_ );

	digitBuffer[ 0 ] = yytext[ 5 ];
	digitBuffer[ 1 ] = yytext[ 6 ];
	digitBuffer[ 2 ] = 0;
	sscanf( digitBuffer, "%hu", &yylval.dateLiteral_.month_ );

	digitBuffer[ 0 ] = yytext[ 8 ];
	digitBuffer[ 1 ] = yytext[ 9 ];
	digitBuffer[ 2 ] = 0;
	sscanf( digitBuffer, "%hu", &yylval.dateLiteral_.day_ );
	return DATE_VALUE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABS;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABSOLUTE;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ACOS;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADA;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_DAYS;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_HOURS;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MINUTES;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MONTHS;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_SECONDS;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_YEARS;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.comparisonMod = SetComparisonConstants::MOD_ALL;
	return ALL;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALLOCATE;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALTER;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.logicalOp = ParserConstants::LOP_AND;
	return AND;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.comparisonMod = SetComparisonConstants::MOD_ANY;
	return ANY;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ARE;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASCII;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASC;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASIN;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AS;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASSERTION;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN2;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AT;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AUTHORIZATION;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.aggregate = ParserConstants::AGGREGATE_AVG;
	return AVG;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BEFORE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_BEGIN;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BETWEEN;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BIGINT;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BINARY;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BIT;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BIT_LENGTH;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BREAK;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BY;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADE;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADED;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CAST;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CATALOG;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CEILING;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CENTER;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_CHAR;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_CHARUC;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_CHAR;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHECK;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CLOSE;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COALESCE;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COBOL;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATION;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLUMN;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMMIT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMPUTE;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONCAT;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECT;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECTION;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINTS;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONTINUE;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONVERT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CORRESPONDING;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COS;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COUNT;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CREATE;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURDATE;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_DATE;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIME;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIMESTAMP;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE_CURRENT_OF;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURSOR;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURTIME;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATABASE;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DATE;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_FORMAT;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_REMAINDER;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFMONTH;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFWEEK;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFYEAR;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYS_BETWEEN;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAY;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEALLOCATE;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DECLARE;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFAULT;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRABLE;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRED;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DELETE;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESC;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIBE;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIPTOR;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIAGNOSTICS;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DICTIONARY;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIRECTORY;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISCONNECT;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISPLACEMENT;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISTINCT;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DOMAIN_TOKEN;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DOUBLE;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DROP;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ELSE;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END_EXEC;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ESCAPE;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXCEPT;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_EXCEPTION;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXEC;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXECUTE;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXISTS;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXP;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTERNAL;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTRACT;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FALSE;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FETCH;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FIRST;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FLOAT;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FLOOR;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FN;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOR;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOREIGN;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FORTRAN;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOUND;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FROM;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FULL;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GET;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GLOBAL;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GO;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GOTO;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GRANT;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GROUP;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HAVING;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOUR;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOURS_BETWEEN;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IDENTITY;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IFNULL;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IGNORE;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IMMEDIATE;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IN;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INCLUDE;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDEX;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDICATOR;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INITIALLY;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INNER;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INPUT;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSENSITIVE;
}
	YY_BREAK
case 178:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSERT;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTEGER;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTEGER;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERVAL;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
{
	BEGIN Name;
	return INTO;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IS;
}
	YY_BREAK
case 186:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ISOLATION;
}
	YY_BREAK
case 187:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JOIN;
}
	YY_BREAK
case 188:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JUSTIFY;
}
	YY_BREAK
case 189:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return KEY;
}
	YY_BREAK
case 190:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LANGUAGE;
}
	YY_BREAK
case 191:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LAST;
}
	YY_BREAK
case 192:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LCASE;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEFT;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LENGTH;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEVEL;
}
	YY_BREAK
case 196:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LIKE;
}
	YY_BREAK
case 197:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LINE_WIDTH;
}
	YY_BREAK
case 198:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCAL;
}
	YY_BREAK
case 199:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCATE;
}
	YY_BREAK
case 200:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOG;
}
	YY_BREAK
case 201:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_LONG;
}
	YY_BREAK
case 202:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOWER;
}
	YY_BREAK
case 203:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LTRIM;
}
	YY_BREAK
case 204:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MATCH;
}
	YY_BREAK
case 205:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.aggregate = ParserConstants::AGGREGATE_MAX;
	return SQL_MAX;
}
	YY_BREAK
case 206:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MICROSOFT;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.aggregate = ParserConstants::AGGREGATE_MIN;
	return SQL_MIN;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUS;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTE;
}
	YY_BREAK
case 210:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTES_BETWEEN;
}
	YY_BREAK
case 211:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODIFY;
}
	YY_BREAK
case 212:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MOD;
}
	YY_BREAK
case 213:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODULE;
}
	YY_BREAK
case 214:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTH;
}
	YY_BREAK
case 215:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTHS_BETWEEN;
}
	YY_BREAK
case 216:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MUMPS;
}
	YY_BREAK
case 217:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NAMES;
}
	YY_BREAK
case 218:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NATIONAL;
}
	YY_BREAK
case 219:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NCHAR;
}
	YY_BREAK
case 220:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NEXT;
}
	YY_BREAK
case 221:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NODUP;
}
	YY_BREAK
case 222:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NONE;
}
	YY_BREAK
case 223:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOT;
}
	YY_BREAK
case 224:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOW;
}
	YY_BREAK
case 225:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_NULL;
}
	YY_BREAK
case 226:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NULLIF;
}
	YY_BREAK
case 227:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NUMERIC;
}
	YY_BREAK
case 228:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OCTET_LENGTH;
}
	YY_BREAK
case 229:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ODBC;
}
	YY_BREAK
case 230:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OF;
}
	YY_BREAK
case 231:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_OFF;
}
	YY_BREAK
case 232:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ON;
}
	YY_BREAK
case 233:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ONLY;
}
	YY_BREAK
case 234:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPEN;
}
	YY_BREAK
case 235:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPTION;
}
	YY_BREAK
case 236:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.logicalOp = ParserConstants::LOP_OR;
	return OR;
}
	YY_BREAK
case 237:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ORDER;
}
	YY_BREAK
case 238:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTER;
}
	YY_BREAK
case 239:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTPUT;
}
	YY_BREAK
case 240:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OVERLAPS;
}
	YY_BREAK
case 241:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PAGE;
}
	YY_BREAK
case 242:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PARTIAL;
}
	YY_BREAK
case 243:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_PASCAL;
}
	YY_BREAK
case 244:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PERSISTENT;
}
	YY_BREAK
case 245:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CQL_PI;
}
	YY_BREAK
case 246:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PLI;
}
	YY_BREAK
case 247:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return POSITION;
}
	YY_BREAK
case 248:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRECISION;
}
	YY_BREAK
case 249:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PREPARE;
}
	YY_BREAK
case 250:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRESERVE;
}
	YY_BREAK
case 251:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIMARY;
}
	YY_BREAK
case 252:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIOR;
}
	YY_BREAK
case 253:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIVILEGES;
}
	YY_BREAK
case 254:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PROCEDURE;
}
	YY_BREAK
case 255:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRODUCT;
}
	YY_BREAK
case 256:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PUBLIC;
}
	YY_BREAK
case 257:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUARTER;
}
	YY_BREAK
case 258:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUIT;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RAND;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return READ_ONLY;
}
	YY_BREAK
case 261:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REAL;
}
	YY_BREAK
case 262:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REFERENCES;
}
	YY_BREAK
case 263:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPEAT;
}
	YY_BREAK
case 264:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPLACE;
}
	YY_BREAK
case 265:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RESTRICT;
}
	YY_BREAK
case 266:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REVOKE;
}
	YY_BREAK
case 267:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RIGHT;
}
	YY_BREAK
case 268:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROLLBACK;
}
	YY_BREAK
case 269:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROWS;
}
	YY_BREAK
case 270:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RPAD;
}
	YY_BREAK
case 271:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RTRIM;
}
	YY_BREAK
case 272:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCHEMA;
}
	YY_BREAK
case 273:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCREEN_WIDTH;
}
	YY_BREAK
case 274:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCROLL;
}
	YY_BREAK
case 275:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECOND;
}
	YY_BREAK
case 276:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECONDS_BETWEEN;
}
	YY_BREAK
case 277:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SELECT;
}
	YY_BREAK
case 278:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SEQUENCE;
}
	YY_BREAK
case 279:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SETOPT;
}
	YY_BREAK
case 280:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SET;
}
	YY_BREAK
case 281:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SHOWOPT;
}
	YY_BREAK
case 282:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIGN;
}
	YY_BREAK
case 283:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIN;
}
	YY_BREAK
case 284:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_SIZE;
}
	YY_BREAK
case 285:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SMALLINT;
}
	YY_BREAK
case 286:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SOME;
}
	YY_BREAK
case 287:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL;
}
	YY_BREAK
case 288:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCA;
}
	YY_BREAK
case 289:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCODE;
}
	YY_BREAK
case 290:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLERROR;
}
	YY_BREAK
case 291:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLSTATE;
}
	YY_BREAK
case 292:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLWARNING;
}
	YY_BREAK
case 293:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQRT;
}
	YY_BREAK
case 294:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return STDEV;
}
	YY_BREAK
case 295:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SUBSTRING;
}
	YY_BREAK
case 296:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.aggregate = ParserConstants::AGGREGATE_SUM;
	return SUM;
}
	YY_BREAK
case 297:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE;
}
	YY_BREAK
case 298:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE_FORMAT;
}
	YY_BREAK
case 299:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSTEM;
}
	YY_BREAK
case 300:
YY_RULE_SETUP
{
	BEGIN Name;
	return TABLE;
}
	YY_BREAK
case 301:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TAN;
}
	YY_BREAK
case 302:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TEMPORARY;
}
	YY_BREAK
case 303:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return THEN;
}
	YY_BREAK
case 304:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIME;
}
	YY_BREAK
case 305:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMESTAMP;
}
	YY_BREAK
case 306:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_HOUR;
}
	YY_BREAK
case 307:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_MINUTE;
}
	YY_BREAK
case 308:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TITLE;
}
	YY_BREAK
case 309:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO;
}
	YY_BREAK
case 310:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_CHAR;
}
	YY_BREAK
case 311:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_DATE;
}
	YY_BREAK
case 312:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSACTION;
}
	YY_BREAK
case 313:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATE;
}
	YY_BREAK
case 314:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATION;
}
	YY_BREAK
case 315:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_TRUE;
}
	YY_BREAK
case 316:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRUNCATE;
}
	YY_BREAK
case 317:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GENERAL_TITLE;
}
	YY_BREAK
case 318:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UCASE;
}
	YY_BREAK
case 319:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNION;
}
	YY_BREAK
case 320:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNIQUE;
}
	YY_BREAK
case 321:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_UNKNOWN;
}
	YY_BREAK
case 322:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPDATE;
}
	YY_BREAK
case 323:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPPER;
}
	YY_BREAK
case 324:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USAGE;
}
	YY_BREAK
case 325:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USER;
}
	YY_BREAK
case 326:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USING;
}
	YY_BREAK
case 327:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUES;
}
	YY_BREAK
case 328:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUE;
}
	YY_BREAK
case 329:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARBINARY;
}
	YY_BREAK
case 330:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARCHAR;
}
	YY_BREAK
case 331:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARYING;
}
	YY_BREAK
case 332:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VENDOR;
}
	YY_BREAK
case 333:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VIEW;
}
	YY_BREAK
case 334:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WEEK;
}
	YY_BREAK
case 335:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHEN;
}
	YY_BREAK
case 336:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHENEVER;
}
	YY_BREAK
case 337:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE;
}
	YY_BREAK
case 338:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WITH;
}
	YY_BREAK
case 339:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORD_WRAPPED;
}
	YY_BREAK
case 340:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORK;
}
	YY_BREAK
case 341:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WRAPPED;
}
	YY_BREAK
case 342:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEAR;
}
	YY_BREAK
case 343:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEARS_BETWEEN;
}
	YY_BREAK
case 344:
YY_RULE_SETUP
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXPONENT;
}
	YY_BREAK
case 345:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
;
	YY_BREAK
case 346:
YY_RULE_SETUP
return CHARACTER_STRING_LITERAL;
	YY_BREAK
case 347:
YY_RULE_SETUP
return DOUBLE_QUOTED_STRING;
	YY_BREAK
case 348:
YY_RULE_SETUP
{
	BEGIN DelimOrSep;
	strcpy( yylval.parserUserName, yytext );
	len = strlen( yylval.parserUserName );
	for( scannerPtr = yylval.parserUserName + ( len - 1 ); *scannerPtr == ' ' && scannerPtr >= yylval.parserUserName; scannerPtr-- )
		*scannerPtr = 0;
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 349:
YY_RULE_SETUP
;
	YY_BREAK
case 350:
YY_RULE_SETUP
{
	BEGIN 0;
	return AMPERSAND;
}
	YY_BREAK
case 351:
YY_RULE_SETUP
{
	BEGIN 0;
	return SEMICOLON;
}
	YY_BREAK
case 352:
YY_RULE_SETUP
{
	BEGIN 0;
	return ASTERISK;
}
	YY_BREAK
case 353:
YY_RULE_SETUP
{
	BEGIN 0;
	return ARITHMETIC_PLUS;
}
	YY_BREAK
case 354:
YY_RULE_SETUP
{
	BEGIN 0;
	return ARITHMETIC_MINUS;
}
	YY_BREAK
case 355:
YY_RULE_SETUP
{
	BEGIN 0;
	return SLASH;
}
	YY_BREAK
case 356:
YY_RULE_SETUP
{
	BEGIN 0;
	return LEFTPAREN;
}
	YY_BREAK
case 357:
YY_RULE_SETUP
{
	BEGIN 0;
	return RIGHTPAREN;
}
	YY_BREAK
case 358:
YY_RULE_SETUP
{
	BEGIN Name;
	return DOT;
}
	YY_BREAK
case 359:
YY_RULE_SETUP
{
	BEGIN 0;
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_EQUAL;
	return EQUAL;
}
	YY_BREAK
case 360:
YY_RULE_SETUP
{
	BEGIN 0;
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_NOT_EQUAL;
	return NOT_EQUAL;
}
	YY_BREAK
case 361:
YY_RULE_SETUP
{
	BEGIN 0;
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER;
	return GREATER_THAN;
}
	YY_BREAK
case 362:
YY_RULE_SETUP
{
	BEGIN 0;
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER_OR_EQUAL;
	return GREATER_OR_EQUAL;
}
	YY_BREAK
case 363:
YY_RULE_SETUP
{
	BEGIN 0;
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS_OR_EQUAL;
	return LESS_OR_EQUAL;
}
	YY_BREAK
case 364:
YY_RULE_SETUP
{
	BEGIN 0;
	yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS;
	return LESS_THAN;
}
	YY_BREAK
case 365:
YY_RULE_SETUP
{
	BEGIN 0;
	return SINGLE_QUOTE;
}
	YY_BREAK
case 366:
YY_RULE_SETUP
{
	BEGIN 0;
	return QUESTION_MARK;
}
	YY_BREAK
case 367:
YY_RULE_SETUP
{
	BEGIN 0;
	return COLON;
}
	YY_BREAK
case 368:
YY_RULE_SETUP
{
	BEGIN 0;
	return COMMA;
}
	YY_BREAK
case 369:
YY_RULE_SETUP
{
	BEGIN 0;
}
	YY_BREAK
case 370:
YY_RULE_SETUP
{
	BEGIN DelimOrSep;
	strcpy( yylval.parserUserName, yytext );
	len = strlen( yylval.parserUserName );
	for( scannerPtr = yylval.parserUserName + ( len - 1 ); *scannerPtr == ' ' && scannerPtr >= yylval.parserUserName; scannerPtr-- )
		*scannerPtr = 0;
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 371:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DelimOrSep):
case YY_STATE_EOF(Name):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( dbsql ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer( dbsql ) to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer( SqlHandle *dbsql )
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1779 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1779 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1778);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput( SqlHandle *dbsql )
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer( dbsql ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput( dbsql );
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#ifdef YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#ifdef YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#ifdef YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
